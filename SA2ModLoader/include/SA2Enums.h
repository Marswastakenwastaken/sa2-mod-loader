#pragma once

// SA2 Enums
#define makemask(enumname,membername) enumname##_##membername = (1 << enumname##Bits_##membername)
#define makemasks(enumname,membername) enumname##s_##membername = (1 << enumname##Bits_##membername)

enum Characters
{
	Characters_Sonic,
	Characters_Shadow,
	Characters_Tails,
	Characters_Eggman,
	Characters_Knuckles,
	Characters_Rouge,
	Characters_MechTails,
	Characters_MechEggman,
	Characters_Amy,
	Characters_SuperSonic,
	Characters_SuperShadow,
	Characters_B,
	Characters_MetalSonic,
	Characters_ChaoWalker,
	Characters_DarkChaoWalker,
	Characters_Tikal,
	Characters_Chaos
};

#define chfl(name) CharacterFlags_##name = (1 << Characters_##name)
enum CharacterFlags
{
	chfl(Sonic),
	chfl(Shadow),
	chfl(Tails),
	chfl(Eggman),
	chfl(Knuckles),
	chfl(Rouge),
	chfl(MechTails),
	chfl(MechEggman),
	chfl(Amy),
	chfl(SuperSonic),
	chfl(SuperShadow),
	chfl(B),
	chfl(MetalSonic),
	chfl(ChaoWalker),
	chfl(DarkChaoWalker),
	chfl(Tikal),
	chfl(Chaos)
};
#undef chfl

enum LevelIDs
{
	LevelIDs_BasicTest,
	LevelIDs_KnucklesTest,
	LevelIDs_SonicTest,
	LevelIDs_GreenForest,
	LevelIDs_WhiteJungle,
	LevelIDs_PumpkinHill,
	LevelIDs_SkyRail,
	LevelIDs_AquaticMine,
	LevelIDs_SecurityHall,
	LevelIDs_PrisonLane,
	LevelIDs_MetalHarbor,
	LevelIDs_IronGate,
	LevelIDs_WeaponsBed,
	LevelIDs_CityEscape,
	LevelIDs_RadicalHighway,
	LevelIDs_WeaponsBed2P,
	LevelIDs_WildCanyon,
	LevelIDs_MissionStreet,
	LevelIDs_DryLagoon,
	LevelIDs_SonicVsShadow1,
	LevelIDs_TailsVsEggman1,
	LevelIDs_SandOcean,
	LevelIDs_CrazyGadget,
	LevelIDs_HiddenBase,
	LevelIDs_EternalEngine,
	LevelIDs_DeathChamber,
	LevelIDs_EggQuarters,
	LevelIDs_LostColony,
	LevelIDs_PyramidCave,
	LevelIDs_TailsVsEggman2,
	LevelIDs_FinalRush,
	LevelIDs_GreenHill,
	LevelIDs_MeteorHerd,
	LevelIDs_KnucklesVsRouge,
	LevelIDs_CannonsCoreS,
	LevelIDs_CannonsCoreE,
	LevelIDs_CannonsCoreT,
	LevelIDs_CannonsCoreR,
	LevelIDs_CannonsCoreK,
	LevelIDs_MissionStreet2P,
	LevelIDs_FinalChase,
	LevelIDs_WildCanyon2P,
	LevelIDs_SonicVsShadow2,
	LevelIDs_CosmicWall,
	LevelIDs_MadSpace,
	LevelIDs_SandOcean2P,
	LevelIDs_DryLagoon2P,
	LevelIDs_PyramidRace,
	LevelIDs_HiddenBase2P,
	LevelIDs_PoolQuest,
	LevelIDs_PlanetQuest,
	LevelIDs_DeckRace,
	LevelIDs_DowntownRace,
	LevelIDs_CosmicWall2P,
	LevelIDs_GrindRace,
	LevelIDs_LostColony2P,
	LevelIDs_EternalEngine2P,
	LevelIDs_MetalHarbor2P,
	LevelIDs_IronGate2P,
	LevelIDs_DeathChamber2P,
	LevelIDs_BigFoot,
	LevelIDs_HotShot,
	LevelIDs_FlyingDog,
	LevelIDs_KingBoomBoo,
	LevelIDs_EggGolemS,
	LevelIDs_Biolizard,
	LevelIDs_FinalHazard,
	LevelIDs_EggGolemE,
	LevelIDs_Route101280 = 70,
	LevelIDs_KartRace,
	LevelIDs_ChaoWorld = 90,
	LevelIDs_Invalid
};

enum KartCourseIDs
{
	KartCourse_Route101,
	KartCourse_Route280,
	KartCourse_Beginner,
	KartCourse_Standard,
	KartCourse_Expert,
	KartCourse_Download
};

enum UpgradeBits : int
{
	UpgradeBits_SonicLightShoes,
	UpgradeBits_SonicAncientLight,
	UpgradeBits_SonicMagicGloves,
	UpgradeBits_SonicFlameRing,
	UpgradeBits_SonicBounceBracelet,
	UpgradeBits_SonicMysticMelody,
	UpgradeBits_TailsBooster,
	UpgradeBits_TailsBazooka,
	UpgradeBits_TailsLaserBlaster,
	UpgradeBits_TailsMysticMelody,
	UpgradeBits_KnucklesShovelClaw,
	UpgradeBits_KnucklesSunglasses,
	UpgradeBits_KnucklesHammerGloves,
	UpgradeBits_KnucklesAirNecklace,
	UpgradeBits_KnucklesMysticMelody,
	UpgradeBits_SuperSonic,
	UpgradeBits_ShadowAirShoes,
	UpgradeBits_ShadowAncientLight,
	UpgradeBits_ShadowFlameRing,
	UpgradeBits_ShadowMysticMelody,
	UpgradeBits_EggmanJetEngine,
	UpgradeBits_EggmanLargeCannon,
	UpgradeBits_EggmanLaserBlaster,
	UpgradeBits_EggmanProtectiveArmor,
	UpgradeBits_EggmanMysticMelody,
	UpgradeBits_RougePickNails,
	UpgradeBits_RougeTreasureScope,
	UpgradeBits_RougeIronBoots,
	UpgradeBits_RougeMysticMelody
};

enum Upgrades : int
{
	makemasks(Upgrade, SonicLightShoes),
	makemasks(Upgrade, SonicAncientLight),
	makemasks(Upgrade, SonicMagicGloves),
	makemasks(Upgrade, SonicFlameRing),
	makemasks(Upgrade, SonicBounceBracelet),
	makemasks(Upgrade, SonicMysticMelody),
	makemasks(Upgrade, TailsBooster),
	makemasks(Upgrade, TailsBazooka),
	makemasks(Upgrade, TailsLaserBlaster),
	makemasks(Upgrade, TailsMysticMelody),
	makemasks(Upgrade, KnucklesShovelClaw),
	makemasks(Upgrade, KnucklesSunglasses),
	makemasks(Upgrade, KnucklesHammerGloves),
	makemasks(Upgrade, KnucklesAirNecklace),
	makemasks(Upgrade, KnucklesMysticMelody),
	makemasks(Upgrade, SuperSonic),
	makemasks(Upgrade, ShadowAirShoes),
	makemasks(Upgrade, ShadowAncientLight),
	makemasks(Upgrade, ShadowFlameRing),
	makemasks(Upgrade, ShadowMysticMelody),
	makemasks(Upgrade, EggmanJetEngine),
	makemasks(Upgrade, EggmanLargeCannon),
	makemasks(Upgrade, EggmanLaserBlaster),
	makemasks(Upgrade, EggmanProtectiveArmor),
	makemasks(Upgrade, EggmanMysticMelody),
	makemasks(Upgrade, RougePickNails),
	makemasks(Upgrade, RougeTreasureScope),
	makemasks(Upgrade, RougeIronBoots),
	makemasks(Upgrade, RougeMysticMelody)
};

enum ChaoType : __int8
{
	ChaoType_Empty = 0x0,
	ChaoType_Egg = 0x1,
	ChaoType_Child = 0x2,
	ChaoType_Good = 0x3,
	ChaoType_Bad = 0x4,
	ChaoType_Neutral_Normal = 0x5,
	ChaoType_Hero_Normal = 0x6,
	ChaoType_Dark_Normal = 0x7,
	ChaoType_Neutral_Swim = 0x8,
	ChaoType_Hero_Swim = 0x9,
	ChaoType_Dark_Swim = 0xA,
	ChaoType_Neutral_Fly = 0xB,
	ChaoType_Hero_Fly = 0xC,
	ChaoType_Dark_Fly = 0xD,
	ChaoType_Neutral_Run = 0xE,
	ChaoType_Hero_Run = 0xF,
	ChaoType_Dark_Run = 0x10,
	ChaoType_Neutral_Power = 0x11,
	ChaoType_Hero_Power = 0x12,
	ChaoType_Dark_Power = 0x13,
	ChaoType_Neutral_Chaos = 0x14,
	ChaoType_Hero_Chaos = 0x15,
	ChaoType_Dark_Chaos = 0x16,
	ChaoType_Tails = 0x17,
	ChaoType_Knuckles = 0x18,
	ChaoType_Amy = 0x19,
};

enum SADXBodyType : __int8
{
	SADXBodyType_Normal = 0x0,
	SADXBodyType_EggChao = 0x1,
	SADXBodyType_Omochao = 0x2,
	SADXBodyType_None = 0x3,
};

enum SA2BAnimal : __int8
{
	SA2BAnimal_None = -1,
	SA2BAnimal_Penguin = 0x0,
	SA2BAnimal_Seal = 0x1,
	SA2BAnimal_Otter = 0x2,
	SA2BAnimal_Rabbit = 0x3,
	SA2BAnimal_Cheetah = 0x4,
	SA2BAnimal_Warthog = 0x5,
	SA2BAnimal_Bear = 0x6,
	SA2BAnimal_Tiger = 0x7,
	SA2BAnimal_Gorilla = 0x8,
	SA2BAnimal_Peacock = 0x9,
	SA2BAnimal_Parrot = 0xA,
	SA2BAnimal_Condor = 0xB,
	SA2BAnimal_Skunk = 0xC,
	SA2BAnimal_Sheep = 0xD,
	SA2BAnimal_Raccoon = 0xE,
	SA2BAnimal_HalfFish = 0xF,
	SA2BAnimal_SkeletonDog = 0x10,
	SA2BAnimal_Bat = 0x11,
	SA2BAnimal_Dragon = 0x12,
	SA2BAnimal_Unicorn = 0x13,
	SA2BAnimal_Phoenix = 0x14,
	SA2BAnimal_YellowChaosDrive = 0x15,
	SA2BAnimal_GreenChaosDrive = 0x16,
	SA2BAnimal_RedChaosDrive = 0x17,
	SA2BAnimal_PurpleChaosDrive = 0x18,
};

enum LoadObj : __int8
{
	LoadObj_Data2 = 0x1,
	LoadObj_Data1 = 0x2,
	LoadObj_UnknownA = 0x4,
	LoadObj_UnknownB = 0x8,
};

enum PowerupBits
{
	PowerupBits_Barrier,
	PowerupBits_MagneticBarrier,
	PowerupBits_Unknown1,
	PowerupBits_Unknown2,
	PowerupBits_Unknown3,
	PowerupBits_Unknown4,
	PowerupBits_Unknown5,
	PowerupBits_Unknown6,
	PowerupBits_Unknown7,
	PowerupBits_Unknown8,
	PowerupBits_Unknown9,
	PowerupBits_Unknown10,
	PowerupBits_Unknown11,
	PowerupBits_Unknown12,
	PowerupBits_Dead,
	PowerupBits_Invincibility
};

enum Powerups : unsigned short
{
	makemasks(Powerup, Barrier),
	makemasks(Powerup, MagneticBarrier),
	makemasks(Powerup, Unknown1),
	makemasks(Powerup, Unknown2),
	makemasks(Powerup, Unknown3),
	makemasks(Powerup, Unknown4),
	makemasks(Powerup, Unknown5),
	makemasks(Powerup, Unknown6),
	makemasks(Powerup, Unknown7),
	makemasks(Powerup, Unknown8),
	makemasks(Powerup, Unknown9),
	makemasks(Powerup, Unknown10),
	makemasks(Powerup, Unknown11),
	makemasks(Powerup, Unknown12),
	makemasks(Powerup, Dead),
	makemasks(Powerup, Invincibility)
};

enum ChaoItemCategory : __int8
{
	ChaoItemCategory_Egg = 0x1,
	ChaoItemCategory_Fruit = 0x3,
	ChaoItemCategory_Seed = 0x7,
	ChaoItemCategory_Hat = 0x9,
	ChaoItemCategory_MenuTheme = 0x10,
};

enum PDD_DEV_SUPPORT
{
	PDD_DEV_SUPPORT_AY2 = 0x200000,
	PDD_DEV_SUPPORT_AX2 = 0x100000,
	PDD_DEV_SUPPORT_AY1 = 0x80000,
	PDD_DEV_SUPPORT_AX1 = 0x40000,
	PDD_DEV_SUPPORT_AL = 0x20000,
	PDD_DEV_SUPPORT_AR = 0x10000,
	PDD_DEV_SUPPORT_KRB = 0x8000,
	PDD_DEV_SUPPORT_KLB = 0x4000,
	PDD_DEV_SUPPORT_KDB = 0x2000,
	PDD_DEV_SUPPORT_KUB = 0x1000,
	PDD_DEV_SUPPORT_TD = 0x800,
	PDD_DEV_SUPPORT_TX = 0x400,
	PDD_DEV_SUPPORT_TY = 0x200,
	PDD_DEV_SUPPORT_TZ = 0x100,
	PDD_DEV_SUPPORT_KR = 0x80,
	PDD_DEV_SUPPORT_KL = 0x40,
	PDD_DEV_SUPPORT_KD = 0x20,
	PDD_DEV_SUPPORT_KU = 0x10,
	PDD_DEV_SUPPORT_ST = 0x8,
	PDD_DEV_SUPPORT_TA = 0x4,
	PDD_DEV_SUPPORT_TB = 0x2,
	PDD_DEV_SUPPORT_TC = 0x1,
};

enum PDD_DGT
{
	PDD_DGT_TL = 0x20000,
	PDD_DGT_TR = 0x10000,
	PDD_DGT_KRB = 0x8000,
	PDD_DGT_KLB = 0x4000,
	PDD_DGT_KDB = 0x2000,
	PDD_DGT_KUB = 0x1000,
	PDD_DGT_TD = 0x800,
	PDD_DGT_TX = 0x400,
	PDD_DGT_TY = 0x200,
	PDD_DGT_TZ = 0x100,
	PDD_DGT_KR = 0x80,
	PDD_DGT_KL = 0x40,
	PDD_DGT_KD = 0x20,
	PDD_DGT_KU = 0x10,
	PDD_DGT_ST = 0x8,
	PDD_DGT_TA = 0x4,
	PDD_DGT_TB = 0x2,
	PDD_DGT_TC = 0x1,
};

enum PDD_DEVTYPE
{
	PDD_DEVTYPE_CONTROLLER = 0x1,
	PDD_DEVTYPE_STORAGE = 0x2,
	PDD_DEVTYPE_LCD = 0x4,
	PDD_DEVTYPE_TIMER = 0x8,
	PDD_DEVTYPE_SOUNDINPUT = 0x10,
	PDD_DEVTYPE_KEYBOARD = 0x40,
	PDD_DEVTYPE_LIGHTGUN = 0x80,
	PDD_DEVTYPE_VIBRATION = 0x100,
};

enum PDD_DEVAREA
{
	PDD_DEVAREA_USA = 0x1,
	PDD_DEVAREA_JAPAN = 0x2,
	PDD_DEVAREA_ASIA = 0x4,
	PDD_DEVAREA_EUROPE = 0x8,
	PDD_DEVAREA_RESERVED1 = 0x10,
	PDD_DEVAREA_RESERVED2 = 0x20,
	PDD_DEVAREA_RESERVED3 = 0x40,
	PDD_DEVAREA_RESERVED4 = 0x80,
};

enum PDD_CONDIR
{
	PDD_CONDIR_TOPSIDE = 0x0,
	PDD_CONDIR_BOTTOMSIDE = 0x1,
	PDD_CONDIR_LEFTSIDE = 0x2,
	PDD_CONDIR_RIGHTSIDE = 0x3,
};

enum ButtonBits
{
	ButtonBits_C,
	ButtonBits_B,
	ButtonBits_A,
	ButtonBits_Start,
	ButtonBits_Up,
	ButtonBits_Down,
	ButtonBits_Left,
	ButtonBits_Right,
	ButtonBits_Z,
	ButtonBits_Y,
	ButtonBits_X,
	ButtonBits_D,
	ButtonBits_Up2,
	ButtonBits_Down2,
	ButtonBits_Left2,
	ButtonBits_Right2,
	ButtonBits_R,
	ButtonBits_L
};

enum Buttons : int
{
	makemasks(Button, C),
	makemasks(Button, B),
	makemasks(Button, A),
	makemasks(Button, Start),
	makemasks(Button, Up),
	makemasks(Button, Down),
	makemasks(Button, Left),
	makemasks(Button, Right),
	makemasks(Button, Z),
	makemasks(Button, Y),
	makemasks(Button, X),
	makemasks(Button, D),
	makemasks(Button, Up2),
	makemasks(Button, Down2),
	makemasks(Button, Left2),
	makemasks(Button, Right2),
	makemasks(Button, R),
	makemasks(Button, L)
};

enum GameMode
{
	GameMode_Initialize,
	GameMode_StartLevel = 4,
	GameMode_Level,
	GameMode_ResetLevel,
	GameMode_StartEvent,
	GameMode_Event,
	GameMode_LoadStory = 12,
	GameMode_LoadAdvertise,
	GameMode_Advertise,
	GameMode_LoadEnding,
	GameMode_Ending,
	GameMode_LoadEmblemScreen,
	GameMode_EmblemScreen,
	GameMode_LoadIntro = 21,
	GameMode_Intro
};

enum GameStates : __int16
{
	GameStates_Inactive = 0,
	GameStates_Loading = 1,
	GameStates_LoadItems = 2,
	GameStates_LoadLevel = 3,
	GameStates_ReturnToMenu_1 = 4,
	GameStates_ReloadCharacter = 5,
	GameStates_ReturnToMenu_2 = 6,
	GameStates_LoadFinished = 7,
	GameStates_Exit_1 = 8,
	GameStates_RestartLevel_NoLifeLost = 9,
	GameStates_Exit_2 = 10,
	GameStates_Exit_3 = 11,
	GameStates_RestartLevel_1 = 12,
	GameStates_NormalRestart = 13,
	GameStates_NormalExit = 14,
	GameStates_ReturnRing = 15,
	GameStates_Ingame = 16,
	GameStates_Pause = 17,
	GameStates_MemoryCard = 18,
	GameStates_GoToNextLevel = 19,
	GameStates_14 = 20,
	GameStates_15 = 21,
	GameStates_16 = 22,
	GameStates_17 = 23,
	GameStates_18 = 24,
	GameStates_19 = 25,
	GameStates_1A = 26,
	GameStates_1B = 27,
	GameStates_1C = 28,
	GameStates_1D = 29,
	GameStates_1E = 30,
	GameStates_1F = 31,
	GameStates_20 = 32,
	GameStates_21 = 33,
	GameStates_22 = 34,
	GameStates_23 = 35,
	GameStates_24 = 36,
	GameStates_25 = 37,
	GameStates_26 = 38,
	GameStates_27 = 39,
	GameStates_28 = 40,
	GameStates_29 = 41,
	GameStates_2A = 42,
	GameStates_2B = 43,
	GameStates_2C = 44,
	GameStates_2D = 45,
	GameStates_2E = 46,
	GameStates_2F = 47,
	GameStates_30 = 48,
	GameStates_31 = 49,
	GameStates_32 = 50,
};

enum StatusBits
{
	StatusBits_Ground,
	StatusBits_OnObjectColli,
	StatusBits_Hurt,
	StatusBits_ObjectInteract,
	StatusBits_Unknown2,
	StatusBits_Unknown3,
	StatusBits_Unknown4,
	StatusBits_Unknown5,
	StatusBits_Ball,
	StatusBits_LightDash,
	StatusBits_Attack,
	StatusBits_HoldObject,
	StatusBits_DoNextAction,
	StatusBits_OnPath,
	StatusBits_DisableControl,
	StatusBits_Unknown6
};

enum Status : uint16_t
{
	makemask(Status, Ground),
	makemask(Status, OnObjectColli),
	makemask(Status, Hurt),
	makemask(Status, ObjectInteract),
	makemask(Status, Unknown2),
	makemask(Status, Unknown3),
	makemask(Status, Unknown4),
	makemask(Status, Unknown5),
	makemask(Status, Ball),
	makemask(Status, LightDash),
	makemask(Status, Attack),
	makemask(Status, HoldObject),
	makemask(Status, DoNextAction),
	makemask(Status, OnPath),
	makemask(Status, DisableControl),
	makemask(Status, Unknown6)
};

enum SpecialTier
{
	SpecialTier_None = 0x0,
	SpecialTier_1 = 0x1,
	SpecialTier_2 = 0x2,
	SpecialTier_3 = 0x4,
};

enum ChaoArea
{
	ChaoArea_Lobby,
	ChaoArea_NeutralGarden,
	ChaoArea_HeroGarden,
	ChaoArea_DarkGarden,
	ChaoArea_Race,
	ChaoArea_Entrance,
	ChaoArea_Kindergarten,
	ChaoArea_Stadium = 9,
	ChaoArea_Karate,
	ChaoArea_NameMachine = 12,
};

enum SADXChaoArea : __int8
{
	SADXChaoArea_None = -1,
	SADXChaoArea_Race = 0x1,
	SADXChaoArea_RaceEntry = 0x2,
	SADXChaoArea_ChaoTransporter = 0x3,
	SADXChaoArea_StationSquare = 0x4,
	SADXChaoArea_EggCarrier = 0x5,
	SADXChaoArea_MysticRuins = 0x6,
	SADXChaoArea_BlackMarket = 0x7,
};

enum SA2BChaoGarden : __int8
{
	SA2BChaoGarden_None = -1,
	SA2BChaoGarden_ChaoGarden = 0x1,
	SA2BChaoGarden_HeroGarden = 0x2,
	SA2BChaoGarden_DarkGarden = 0x3,
};

enum ChaoGrade : __int8
{
	ChaoGrade_E = 0x0,
	ChaoGrade_D = 0x1,
	ChaoGrade_C = 0x2,
	ChaoGrade_B = 0x3,
	ChaoGrade_A = 0x4,
	ChaoGrade_S = 0x5,
};

enum ChaoEmotiball : __int8
{
	ChaoEmotiball_Normal = 0x0,
	ChaoEmotiball_Flame = 0x1,
	ChaoEmotiball_None = 0x2,
};

enum ChaoEyes : __int8
{
	ChaoEyes_Normal = 0x0,
	ChaoEyes_Painful = 0x1,
	ChaoEyes_ClosedStraight = 0x2,
	ChaoEyes_ClosedHappy = 0x3,
	ChaoEyes_ClosedUp = 0x4,
	ChaoEyes_Tiny = 0x5,
	ChaoEyes_Circles = 0x6,
	ChaoEyes_ClosedDown = 0x7,
	ChaoEyes_Tiny2 = 0x8,
	ChaoEyes_HalfClosed = 0x9,
	ChaoEyes_Mean = 0xA,
	ChaoEyes_GreenChaos = 0xB,
	ChaoEyes_BlueChaos = 0xC,
	ChaoEyes_YellowChaos = 0xD,
};

enum ChaoMedal : __int8
{
	ChaoMedal_None = 0x0,
	ChaoMedal_Aquamarine = 0x1,
	ChaoMedal_Topaz = 0x2,
	ChaoMedal_Peridot = 0x3,
	ChaoMedal_Garnet = 0x4,
	ChaoMedal_Onyx = 0x5,
	ChaoMedal_Diamond = 0x6,
	ChaoMedal_Beginner = 0x7,
	ChaoMedal_Challenge = 0x8,
	ChaoMedal_Hero = 0x9,
	ChaoMedal_Dark = 0xA,
	ChaoMedal_Pearl = 0xB,
	ChaoMedal_Amethyst = 0xC,
	ChaoMedal_Emerald = 0xD,
	ChaoMedal_Ruby = 0xE,
	ChaoMedal_Sapphire = 0xF,
};

enum ChaoMouth : __int8
{
	ChaoMouth_ToothySmile = 0x1,
	ChaoMouth_Open = 0x2,
	ChaoMouth_ClosedSmile = 0x3,
	ChaoMouth_ClosedFrown = 0x4,
	ChaoMouth_OpenSmile = 0x5,
	ChaoMouth_OpenFrown = 0x6,
	ChaoMouth_ClosedSmile2 = 0x7,
	ChaoMouth_Squiggly = 0x8,
	ChaoMouth_ToothyFrown = 0x9,
	ChaoMouth_ClosedFrown2 = 0xA,
	ChaoMouth_WideOpen = 0xB,
	ChaoMouth_ClosedFrown3 = 0xC,
	ChaoMouth_StraightMoustache = 0xD,
	ChaoMouth_SquigglyMoustache1 = 0xE,
	ChaoMouth_SquigglyMoustache2 = 0xF,
};

enum SA2BBodyType : __int8
{
	SA2BBodyType_Normal = 0x0,
	SA2BBodyType_EggChao = 0x1,
	SA2BBodyType_Omochao = 0x2,
	SA2BBodyType_Animal = 0x3,
	SA2BBodyType_None = 0x5,
};

enum SADXRetailColour : __int8
{
	SADXRetailColour_Normal = 0x0,
	SADXRetailColour_Yellow = 0x1,
	SADXRetailColour_White = 0x2,
	SADXRetailColour_Brown = 0x3,
	SADXRetailColour_Aqua = 0x4,
	SADXRetailColour_Pink = 0x5,
	SADXRetailColour_Blue = 0x6,
	SADXRetailColour_Grey = 0x7,
	SADXRetailColour_Green = 0x8,
	SADXRetailColour_Red = 0x9,
	SADXRetailColour_LightGreen = 0xA,
	SADXRetailColour_Purple = 0xB,
	SADXRetailColour_Orange = 0xC,
	SADXRetailColour_Black = 0xD,
	SADXRetailColour_TransparentRed = 0xE,
	SADXRetailColour_TransparentPurple = 0xF,
	SADXRetailColour_Invisible = 0x10,
};

enum SADXSteamColour : __int8
{
	SADXSteamColour_Normal = 0x0,
	SADXSteamColour_Yellow = 0x1,
	SADXSteamColour_White = 0x2,
	SADXSteamColour_Brown = 0x3,
	SADXSteamColour_Aqua = 0x4,
	SADXSteamColour_Pink = 0x5,
	SADXSteamColour_Blue = 0x6,
	SADXSteamColour_Grey = 0x7,
	SADXSteamColour_Green = 0x8,
	SADXSteamColour_Red = 0x9,
	SADXSteamColour_LightGreen = 0xA,
	SADXSteamColour_Purple = 0xB,
	SADXSteamColour_Orange = 0xC,
	SADXSteamColour_Black = 0xD,
	SADXSteamColour_Invisible = 0xE,
	SADXSteamColour_TransparentGrey = 0x10,
};

enum SA2BColour : __int8
{
	SA2BColour_Normal = 0x0,
	SA2BColour_Yellow = 0x1,
	SA2BColour_White = 0x2,
	SA2BColour_Brown = 0x3,
	SA2BColour_SkyBlue = 0x4,
	SA2BColour_Pink = 0x5,
	SA2BColour_Blue = 0x6,
	SA2BColour_Grey = 0x7,
	SA2BColour_Green = 0x8,
	SA2BColour_Red = 0x9,
	SA2BColour_LimeGreen = 0xA,
	SA2BColour_Purple = 0xB,
	SA2BColour_Orange = 0xC,
	SA2BColour_Black = 0xD,
};

enum SADXEggColour : __int8
{
	SADXEggColour_Normal = 0x0,
	SADXEggColour_Yellow_MonoTone = 0x1,
	SADXEggColour_White_MonoTone = 0x2,
	SADXEggColour_Brown_MonoTone = 0x3,
	SADXEggColour_Aqua_MonoTone = 0x4,
	SADXEggColour_Pink_MonoTone = 0x5,
	SADXEggColour_Blue_MonoTone = 0x6,
	SADXEggColour_Grey_MonoTone = 0x7,
	SADXEggColour_Green_MonoTone = 0x8,
	SADXEggColour_Red_MonoTone = 0x9,
	SADXEggColour_LightGreen_MonoTone = 0xA,
	SADXEggColour_Purple_MonoTone = 0xB,
	SADXEggColour_Orange_MonoTone = 0xC,
	SADXEggColour_Black_MonoTone = 0xD,
	SADXEggColour_Yellow_TwoTone = 0xE,
	SADXEggColour_White_TwoTone = 0xF,
	SADXEggColour_Brown_TwoTone = 0x10,
	SADXEggColour_Aqua_TwoTone = 0x11,
	SADXEggColour_Pink_TwoTone = 0x12,
	SADXEggColour_Blue_TwoTone = 0x13,
	SADXEggColour_Grey_TwoTone = 0x14,
	SADXEggColour_Green_TwoTone = 0x15,
	SADXEggColour_Red_TwoTone = 0x16,
	SADXEggColour_LightGreen_TwoTone = 0x17,
	SADXEggColour_Purple_TwoTone = 0x18,
	SADXEggColour_Orange_TwoTone = 0x19,
	SADXEggColour_Black_TwoTone = 0x1A,
	SADXEggColour_NormalShiny = 0x1B,
	SADXEggColour_YellowShiny_MonoTone = 0x1C,
	SADXEggColour_WhiteShiny_MonoTone = 0x1D,
	SADXEggColour_BrownShiny_MonoTone = 0x1E,
	SADXEggColour_AquaShiny_MonoTone = 0x1F,
	SADXEggColour_PinkShiny_MonoTone = 0x20,
	SADXEggColour_BlueShiny_MonoTone = 0x21,
	SADXEggColour_GreyShiny_MonoTone = 0x22,
	SADXEggColour_GreenShiny_MonoTone = 0x23,
	SADXEggColour_RedShiny_MonoTone = 0x24,
	SADXEggColour_LightGreenShiny_MonoTone = 0x25,
	SADXEggColour_PurpleShiny_MonoTone = 0x26,
	SADXEggColour_OrangeShiny_MonoTone = 0x27,
	SADXEggColour_BlackShiny_MonoTone = 0x28,
	SADXEggColour_YellowShiny_TwoTone = 0x29,
	SADXEggColour_WhiteShiny_TwoTone = 0x2A,
	SADXEggColour_BrownShiny_TwoTone = 0x2B,
	SADXEggColour_AquaShiny_TwoTone = 0x2C,
	SADXEggColour_PinkShiny_TwoTone = 0x2D,
	SADXEggColour_BlueShiny_TwoTone = 0x2E,
	SADXEggColour_GreyShiny_TwoTone = 0x2F,
	SADXEggColour_GreenShiny_TwoTone = 0x30,
	SADXEggColour_RedShiny_TwoTone = 0x31,
	SADXEggColour_LightGreenShiny_TwoTone = 0x32,
	SADXEggColour_PurpleShiny_TwoTone = 0x33,
	SADXEggColour_OrangeShiny_TwoTone = 0x34,
	SADXEggColour_BlackShiny_TwoTone = 0x35,
	SADXEggColour_YellowJewel = 0x36,
	SADXEggColour_WhiteJewel = 0x37,
	SADXEggColour_PinkJewel = 0x38,
	SADXEggColour_BlueJewel = 0x39,
	SADXEggColour_GreenJewel = 0x3A,
	SADXEggColour_PurpleJewel = 0x3B,
	SADXEggColour_AquaJewel = 0x3C,
	SADXEggColour_RedJewel = 0x3D,
	SADXEggColour_BlackJewel = 0x3E,
	SADXEggColour_LightGreenJewel = 0x3F,
	SADXEggColour_OrangeJewel = 0x40,
	SADXEggColour_Pearl = 0x41,
	SADXEggColour_Metal1 = 0x42,
	SADXEggColour_Metal2 = 0x43,
	SADXEggColour_Glass = 0x44,
};

enum SA2BEggColour : __int8
{
	SA2BEggColour_Normal = 0x0,
	SA2BEggColour_Yellow_MonoTone = 0x1,
	SA2BEggColour_White_MonoTone = 0x2,
	SA2BEggColour_Brown_MonoTone = 0x3,
	SA2BEggColour_SkyBlue_MonoTone = 0x4,
	SA2BEggColour_Pink_MonoTone = 0x5,
	SA2BEggColour_Blue_MonoTone = 0x6,
	SA2BEggColour_Grey_MonoTone = 0x7,
	SA2BEggColour_Green_MonoTone = 0x8,
	SA2BEggColour_Red_MonoTone = 0x9,
	SA2BEggColour_LimeGreen_MonoTone = 0xA,
	SA2BEggColour_Purple_MonoTone = 0xB,
	SA2BEggColour_Orange_MonoTone = 0xC,
	SA2BEggColour_Black_MonoTone = 0xD,
	SA2BEggColour_Yellow_TwoTone = 0xE,
	SA2BEggColour_White_TwoTone = 0xF,
	SA2BEggColour_Brown_TwoTone = 0x10,
	SA2BEggColour_SkyBlue_TwoTone = 0x11,
	SA2BEggColour_Pink_TwoTone = 0x12,
	SA2BEggColour_Blue_TwoTone = 0x13,
	SA2BEggColour_Grey_TwoTone = 0x14,
	SA2BEggColour_Green_TwoTone = 0x15,
	SA2BEggColour_Red_TwoTone = 0x16,
	SA2BEggColour_LimeGreen_TwoTone = 0x17,
	SA2BEggColour_Purple_TwoTone = 0x18,
	SA2BEggColour_Orange_TwoTone = 0x19,
	SA2BEggColour_Black_TwoTone = 0x1A,
	SA2BEggColour_NormalShiny = 0x1B,
	SA2BEggColour_YellowShiny_MonoTone = 0x1C,
	SA2BEggColour_WhiteShiny_MonoTone = 0x1D,
	SA2BEggColour_BrownShiny_MonoTone = 0x1E,
	SA2BEggColour_SkyBlueShiny_MonoTone = 0x1F,
	SA2BEggColour_PinkShiny_MonoTone = 0x20,
	SA2BEggColour_BlueShiny_MonoTone = 0x21,
	SA2BEggColour_GreyShiny_MonoTone = 0x22,
	SA2BEggColour_GreenShiny_MonoTone = 0x23,
	SA2BEggColour_RedShiny_MonoTone = 0x24,
	SA2BEggColour_LimeGreenShiny_MonoTone = 0x25,
	SA2BEggColour_PurpleShiny_MonoTone = 0x26,
	SA2BEggColour_OrangeShiny_MonoTone = 0x27,
	SA2BEggColour_BlackShiny_MonoTone = 0x28,
	SA2BEggColour_YellowShiny_TwoTone = 0x29,
	SA2BEggColour_WhiteShiny_TwoTone = 0x2A,
	SA2BEggColour_BrownShiny_TwoTone = 0x2B,
	SA2BEggColour_SkyBlueShiny_TwoTone = 0x2C,
	SA2BEggColour_PinkShiny_TwoTone = 0x2D,
	SA2BEggColour_BlueShiny_TwoTone = 0x2E,
	SA2BEggColour_GreyShiny_TwoTone = 0x2F,
	SA2BEggColour_GreenShiny_TwoTone = 0x30,
	SA2BEggColour_RedShiny_TwoTone = 0x31,
	SA2BEggColour_LimeGreenShiny_TwoTone = 0x32,
	SA2BEggColour_PurpleShiny_TwoTone = 0x33,
	SA2BEggColour_OrangeShiny_TwoTone = 0x34,
	SA2BEggColour_BlackShiny_TwoTone = 0x35,
	SA2BEggColour_GlitchyNormal = 0x36,
};

enum SADXTexture : __int8
{
	SADXTexture_None = 0x0,
	SADXTexture_YellowJewel = 0x1,
	SADXTexture_WhiteJewel = 0x2,
	SADXTexture_PinkJewel = 0x3,
	SADXTexture_BlueJewel = 0x4,
	SADXTexture_GreenJewel = 0x5,
	SADXTexture_PurpleJewel = 0x6,
	SADXTexture_AquaJewel = 0x7,
	SADXTexture_RedJewel = 0x8,
	SADXTexture_BlackJewel = 0x9,
	SADXTexture_LightGreenJewel = 0xA,
	SADXTexture_OrangeJewel = 0xB,
	SADXTexture_Pearl = 0xC,
	SADXTexture_Metal1 = 0xD,
	SADXTexture_Metal2 = 0xE,
	SADXTexture_Glass = 0xF,
	SADXTexture_Moon = 0x10,
};

enum SA2BTexture : __int8
{
	SA2BTexture_None = 0x0,
	SA2BTexture_YellowJewel = 0x1,
	SA2BTexture_WhiteJewel = 0x2,
	SA2BTexture_PinkJewel = 0x3,
	SA2BTexture_BlueJewel = 0x4,
	SA2BTexture_GreenJewel = 0x5,
	SA2BTexture_PurpleJewel = 0x6,
	SA2BTexture_SkyBlueJewel = 0x7,
	SA2BTexture_RedJewel = 0x8,
	SA2BTexture_BlackJewel = 0x9,
	SA2BTexture_LimeGreenJewel = 0xA,
	SA2BTexture_OrangeJewel = 0xB,
	SA2BTexture_Pearl = 0xC,
	SA2BTexture_Metal1 = 0xD,
	SA2BTexture_Metal2 = 0xE,
	SA2BTexture_Glass = 0xF,
	SA2BTexture_Moon = 0x10,
};

enum ChaoFavouriteFruit : __int8
{
	ChaoFavouriteFruit_RoundFruit1 = 0x0,
	ChaoFavouriteFruit_RoundFruit2 = 0x1,
	ChaoFavouriteFruit_TriangleFruit1 = 0x2,
	ChaoFavouriteFruit_TriangleFruit2 = 0x3,
	ChaoFavouriteFruit_SquareFruit1 = 0x4,
	ChaoFavouriteFruit_SquareFruit2 = 0x5,
	ChaoFavouriteFruit_None1 = 0x6,
	ChaoFavouriteFruit_None2 = 0x7,
};

enum ChaoClassroomLessonFlags
{
	ChaoClassroomLessonFlags_None = 0x0,
	ChaoClassroomLessonFlags_DrawingLevel1 = 0x1,
	ChaoClassroomLessonFlags_DrawingLevel2 = 0x2,
	ChaoClassroomLessonFlags_DrawingLevel3 = 0x4,
	ChaoClassroomLessonFlags_DrawingLevel4 = 0x8,
	ChaoClassroomLessonFlags_DrawingLevel5 = 0x10,
	ChaoClassroomLessonFlags_ShakeDance = 0x100,
	ChaoClassroomLessonFlags_SpinDance = 0x200,
	ChaoClassroomLessonFlags_StepDance = 0x400,
	ChaoClassroomLessonFlags_GoGoDance = 0x800,
	ChaoClassroomLessonFlags_Exercise = 0x1000,
	ChaoClassroomLessonFlags_SongLevel1 = 0x10000,
	ChaoClassroomLessonFlags_SongLevel2 = 0x20000,
	ChaoClassroomLessonFlags_SongLevel3 = 0x40000,
	ChaoClassroomLessonFlags_SongLevel4 = 0x80000,
	ChaoClassroomLessonFlags_SongLevel5 = 0x100000,
	ChaoClassroomLessonFlags_Bell = 0x1000000,
	ChaoClassroomLessonFlags_Castanets = 0x2000000,
	ChaoClassroomLessonFlags_Cymbals = 0x4000000,
	ChaoClassroomLessonFlags_Drum = 0x8000000,
	ChaoClassroomLessonFlags_Flute = 0x10000000,
	ChaoClassroomLessonFlags_Maracas = 0x20000000,
	ChaoClassroomLessonFlags_Trumpet = 0x40000000,
	ChaoClassroomLessonFlags_Tambourine = 0x80000000,
};

enum SADXAnimalFlags : __int16
{
	SADXAnimalFlags_None = 0x0,
	SADXAnimalFlags_Seal = 0x1,
	SADXAnimalFlags_Penguin = 0x2,
	SADXAnimalFlags_Otter = 0x4,
	SADXAnimalFlags_Peacock = 0x8,
	SADXAnimalFlags_Swallow = 0x10,
	SADXAnimalFlags_Parrot = 0x20,
	SADXAnimalFlags_Deer = 0x40,
	SADXAnimalFlags_Rabbit = 0x80,
	SADXAnimalFlags_Kangaroo = 0x100,
	SADXAnimalFlags_Gorilla = 0x200,
	SADXAnimalFlags_Lion = 0x400,
	SADXAnimalFlags_Elephant = 0x800,
	SADXAnimalFlags_Mole = 0x1000,
	SADXAnimalFlags_Koala = 0x2000,
	SADXAnimalFlags_Skunk = 0x4000,
};

enum SA2BAnimalFlags : int
{
	SA2BAnimalFlags_None = 0x0,
	SA2BAnimalFlags_Penguin = 0x1,
	SA2BAnimalFlags_Seal = 0x2,
	SA2BAnimalFlags_Otter = 0x4,
	SA2BAnimalFlags_Rabbit = 0x8,
	SA2BAnimalFlags_Cheetah = 0x10,
	SA2BAnimalFlags_Warthog = 0x20,
	SA2BAnimalFlags_Bear = 0x40,
	SA2BAnimalFlags_Tiger = 0x80,
	SA2BAnimalFlags_Gorilla = 0x100,
	SA2BAnimalFlags_Peacock = 0x200,
	SA2BAnimalFlags_Parrot = 0x400,
	SA2BAnimalFlags_Condor = 0x800,
	SA2BAnimalFlags_Skunk = 0x1000,
	SA2BAnimalFlags_Sheep = 0x2000,
	SA2BAnimalFlags_Raccoon = 0x4000,
	SA2BAnimalFlags_HalfFish = 0x8000,
	SA2BAnimalFlags_SkeletonDog = 0x10000,
	SA2BAnimalFlags_Bat = 0x20000,
	SA2BAnimalFlags_Dragon = 0x40000,
	SA2BAnimalFlags_Unicorn = 0x80000,
	SA2BAnimalFlags_Phoenix = 0x100000
};

enum ChaoToyFlags : __int16
{
	ChaoToyFlags_None = 0x0,
	ChaoToyFlags_Rattle = 0x1,
	ChaoToyFlags_Car = 0x2,
	ChaoToyFlags_PictureBook = 0x4,
	ChaoToyFlags_SonicDoll = 0x10,
	ChaoToyFlags_Broomstick = 0x20,
	ChaoToyFlags_Unknown = 0x40,
	ChaoToyFlags_PogoStick = 0x80,
	ChaoToyFlags_Crayons = 0x100,
	ChaoToyFlags_BubbleWand = 0x200,
	ChaoToyFlags_Shovel = 0x400,
	ChaoToyFlags_WateringCan = 0x800,
};

enum SADXAnimal : __int8
{
	SADXAnimal_None = -1,
	SADXAnimal_Seal = 0x0,
	SADXAnimal_Penguin = 0x1,
	SADXAnimal_Otter = 0x2,
	SADXAnimal_Peacock = 0x3,
	SADXAnimal_Swallow = 0x4,
	SADXAnimal_Parrot = 0x5,
	SADXAnimal_Deer = 0x6,
	SADXAnimal_Rabbit = 0x7,
	SADXAnimal_Kangaroo = 0x8,
	SADXAnimal_Gorilla = 0x9,
	SADXAnimal_Lion = 0xA,
	SADXAnimal_Elephant = 0xB,
	SADXAnimal_Mole = 0xC,
	SADXAnimal_Koala = 0xD,
	SADXAnimal_Skunk = 0xE,
};

enum SADXFruit : __int8
{
	SADXFruit_None = -1,
	SADXFruit_RegularFruit = 0x18,
	SADXFruit_StrongFruit = 0x3,
	SADXFruit_TastyFruit = 0x4,
	SADXFruit_HeroFruit = 0x5,
	SADXFruit_DarkFruit = 0x6,
	SADXFruit_RoundFruit = 0x7,
	SADXFruit_TriangularFruit = 0x8,
	SADXFruit_CubicleFruit = 0x9,
	SADXFruit_HeartFruit = 0xA,
	SADXFruit_ChaoFruit = 0xB,
	SADXFruit_Mushroom = 0x14,
	SADXFruit_MushroomAlt = 0x15,
	SADXFruit_OrangeFruit = 0xD,
	SADXFruit_BlueFruit = 0xE,
	SADXFruit_PinkFruit = 0xF,
	SADXFruit_GreenFruit = 0x10,
	SADXFruit_PurpleFruit = 0x11,
	SADXFruit_YellowFruit = 0x12,
	SADXFruit_RedFruit = 0x13,
	SADXFruit_SmartFruit = 0xC,
};

enum SA2BFruit : __int8
{
	SA2BFruit_None = -1,
	SA2BFruit_ChaoGardenFruit = 0x0,
	SA2BFruit_HeroGardenFruit = 0x1,
	SA2BFruit_DarkGardenFruit = 0x2,
	SA2BFruit_StrongFruit = 0x3,
	SA2BFruit_TastyFruit = 0x4,
	SA2BFruit_HeroFruit = 0x5,
	SA2BFruit_DarkFruit = 0x6,
	SA2BFruit_RoundFruit = 0x7,
	SA2BFruit_TriangleFruit = 0x8,
	SA2BFruit_SquareFruit = 0x9,
	SA2BFruit_HeartFruit = 0xA,
	SA2BFruit_ChaoFruit = 0xB,
	SA2BFruit_Mushroom = 0x14,
	SA2BFruit_MushroomAlt = 0x15,
	SA2BFruit_OrangeFruit = 0xD,
	SA2BFruit_BlueFruit = 0xE,
	SA2BFruit_PinkFruit = 0xF,
	SA2BFruit_GreenFruit = 0x10,
	SA2BFruit_PurpleFruit = 0x11,
	SA2BFruit_YellowFruit = 0x12,
	SA2BFruit_RedFruit = 0x13,
	SA2BFruit_SmartFruit = 0xC,
	SA2BFruit_MintCandy = 0x16,
	SA2BFruit_Grapes = 0x17,
};

enum SADXHat : __int8
{
	SADXHat_None = 0x0,
	SADXHat_Pumpkin = 0x1,
	SADXHat_Skull = 0x2,
	SADXHat_Apple = 0x3,
	SADXHat_Bucket = 0x4,
	SADXHat_EmptyCan = 0x5,
	SADXHat_CardboardBox = 0x6,
	SADXHat_FlowerPot = 0x7,
	SADXHat_PaperBag = 0x8,
	SADXHat_Pan = 0x9,
	SADXHat_Stump = 0xA,
	SADXHat_Watermelon = 0xB,
	SADXHat_RedWoolBeanie = 0xC,
	SADXHat_BlueWoolBeanie = 0xD,
	SADXHat_BlackWoolBeanie = 0xE,
	SADXHat_Pacifier = 0xF,
	SADXHat_NormalEggShell = 0x10,
	SADXHat_Yellow_MonoTone_EggShell = 0x11,
	SADXHat_White_MonoTone_EggShell = 0x12,
	SADXHat_Brown_MonoTone_EggShell = 0x13,
	SADXHat_Aqua_MonoTone_EggShell = 0x14,
	SADXHat_Pink_MonoTone_EggShell = 0x15,
	SADXHat_Blue_MonoTone_EggShell = 0x16,
	SADXHat_Grey_MonoTone_EggShell = 0x17,
	SADXHat_Green_MonoTone_EggShell = 0x18,
	SADXHat_Red_MonoTone_EggShell = 0x19,
	SADXHat_LightGreen_MonoTone_EggShell = 0x1A,
	SADXHat_Purple_MonoTone_EggShell = 0x1B,
	SADXHat_Orange_MonoTone_EggShell = 0x1C,
	SADXHat_Black_MonoTone_EggShell = 0x1D,
	SADXHat_Yellow_TwoTone_EggShell = 0x1E,
	SADXHat_White_TwoTone_EggShell = 0x1F,
	SADXHat_Brown_TwoTone_EggShell = 0x20,
	SADXHat_Aqua_TwoTone_EggShell = 0x21,
	SADXHat_Pink_TwoTone_EggShell = 0x22,
	SADXHat_Blue_TwoTone_EggShell = 0x23,
	SADXHat_Grey_TwoTone_EggShell = 0x24,
	SADXHat_Green_TwoTone_EggShell = 0x25,
	SADXHat_Red_TwoTone_EggShell = 0x26,
	SADXHat_LightGreen_TwoTone_EggShell = 0x27,
	SADXHat_Purple_TwoTone_EggShell = 0x28,
	SADXHat_Orange_TwoTone_EggShell = 0x29,
	SADXHat_Black_TwoTone_EggShell = 0x2A,
	SADXHat_NormalShinyEggShell = 0x2B,
	SADXHat_YellowShiny_MonoTone_EggShell = 0x2C,
	SADXHat_WhiteShiny_MonoTone_EggShell = 0x2D,
	SADXHat_BrownShiny_MonoTone_EggShell = 0x2E,
	SADXHat_AquaShiny_MonoTone_EggShell = 0x2F,
	SADXHat_PinkShiny_MonoTone_EggShell = 0x30,
	SADXHat_BlueShiny_MonoTone_EggShell = 0x31,
	SADXHat_GreyShiny_MonoTone_EggShell = 0x32,
	SADXHat_GreenShiny_MonoTone_EggShell = 0x33,
	SADXHat_RedShiny_MonoTone_EggShell = 0x34,
	SADXHat_LightGreenShiny_MonoTone_EggShell = 0x35,
	SADXHat_PurpleShiny_MonoTone_EggShell = 0x36,
	SADXHat_OrangeShiny_MonoTone_EggShell = 0x37,
	SADXHat_BlackShiny_MonoTone_EggShell = 0x38,
	SADXHat_YellowShiny_TwoTone_EggShell = 0x39,
	SADXHat_WhiteShiny_TwoTone_EggShell = 0x3A,
	SADXHat_BrownShiny_TwoTone_EggShell = 0x3B,
	SADXHat_AquaShiny_TwoTone_EggShell = 0x3C,
	SADXHat_PinkShiny_TwoTone_EggShell = 0x3D,
	SADXHat_BlueShiny_TwoTone_EggShell = 0x3E,
	SADXHat_GreyShiny_TwoTone_EggShell = 0x3F,
	SADXHat_GreenShiny_TwoTone_EggShell = 0x40,
	SADXHat_RedShiny_TwoTone_EggShell = 0x41,
	SADXHat_LightGreenShiny_TwoTone_EggShell = 0x42,
	SADXHat_PurpleShiny_TwoTone_EggShell = 0x43,
	SADXHat_OrangeShiny_TwoTone_EggShell = 0x44,
	SADXHat_BlackShiny_TwoTone_EggShell = 0x45,
	SADXHat_YellowJewelEggShell = 0x46,
	SADXHat_WhiteJewelEggShell = 0x47,
	SADXHat_PinkJewelEggShell = 0x48,
	SADXHat_BlueJewelEggShell = 0x49,
	SADXHat_GreenJewelEggShell = 0x4A,
	SADXHat_PurpleJewelEggShell = 0x4B,
	SADXHat_AquaJewelEggShell = 0x4C,
	SADXHat_RedJewelEggShell = 0x4D,
	SADXHat_BlackJewelEggShell = 0x4E,
	SADXHat_LightGreenJewelEggShell = 0x4F,
	SADXHat_OrangeJewelEggShell = 0x50,
	SADXHat_PearlEggShell = 0x51,
	SADXHat_Metal1EggShell = 0x52,
	SADXHat_Metal2EggShell = 0x53,
	SADXHat_GlassEggShell = 0x54,
};

enum SA2BHat : __int8
{
	SA2BHat_None = 0x0,
	SA2BHat_Pumpkin = 0x1,
	SA2BHat_Skull = 0x2,
	SA2BHat_Apple = 0x3,
	SA2BHat_Bucket = 0x4,
	SA2BHat_EmptyCan = 0x5,
	SA2BHat_CardboardBox = 0x6,
	SA2BHat_FlowerPot = 0x7,
	SA2BHat_PaperBag = 0x8,
	SA2BHat_Pan = 0x9,
	SA2BHat_Stump = 0xA,
	SA2BHat_Watermelon = 0xB,
	SA2BHat_RedWoolBeanie = 0xC,
	SA2BHat_BlueWoolBeanie = 0xD,
	SA2BHat_BlackWoolBeanie = 0xE,
	SA2BHat_Pacifier = 0xF,
	SA2BHat_NormalEggShell = 0x10,
	SA2BHat_Yellow_MonoTone_EggShell = 0x11,
	SA2BHat_White_MonoTone_EggShell = 0x12,
	SA2BHat_Brown_MonoTone_EggShell = 0x13,
	SA2BHat_SkyBlue_MonoTone_EggShell = 0x14,
	SA2BHat_Pink_MonoTone_EggShell = 0x15,
	SA2BHat_Blue_MonoTone_EggShell = 0x16,
	SA2BHat_Grey_MonoTone_EggShell = 0x17,
	SA2BHat_Green_MonoTone_EggShell = 0x18,
	SA2BHat_Red_MonoTone_EggShell = 0x19,
	SA2BHat_LimeGreen_MonoTone_EggShell = 0x1A,
	SA2BHat_Purple_MonoTone_EggShell = 0x1B,
	SA2BHat_Orange_MonoTone_EggShell = 0x1C,
	SA2BHat_Black_MonoTone_EggShell = 0x1D,
	SA2BHat_Yellow_TwoTone_EggShell = 0x1E,
	SA2BHat_White_TwoTone_EggShell = 0x1F,
	SA2BHat_Brown_TwoTone_EggShell = 0x20,
	SA2BHat_SkyBlue_TwoTone_EggShell = 0x21,
	SA2BHat_Pink_TwoTone_EggShell = 0x22,
	SA2BHat_Blue_TwoTone_EggShell = 0x23,
	SA2BHat_Grey_TwoTone_EggShell = 0x24,
	SA2BHat_Green_TwoTone_EggShell = 0x25,
	SA2BHat_Red_TwoTone_EggShell = 0x26,
	SA2BHat_LimeGreen_TwoTone_EggShell = 0x27,
	SA2BHat_Purple_TwoTone_EggShell = 0x28,
	SA2BHat_Orange_TwoTone_EggShell = 0x29,
	SA2BHat_Black_TwoTone_EggShell = 0x2A,
	SA2BHat_NormalShinyEggShell = 0x2B,
	SA2BHat_YellowShiny_MonoTone_EggShell = 0x2C,
	SA2BHat_WhiteShiny_MonoTone_EggShell = 0x2D,
	SA2BHat_BrownShiny_MonoTone_EggShell = 0x2E,
	SA2BHat_SkyBlueShiny_MonoTone_EggShell = 0x2F,
	SA2BHat_PinkShiny_MonoTone_EggShell = 0x30,
	SA2BHat_BlueShiny_MonoTone_EggShell = 0x31,
	SA2BHat_GreyShiny_MonoTone_EggShell = 0x32,
	SA2BHat_GreenShiny_MonoTone_EggShell = 0x33,
	SA2BHat_RedShiny_MonoTone_EggShell = 0x34,
	SA2BHat_LimeGreenShiny_MonoTone_EggShell = 0x35,
	SA2BHat_PurpleShiny_MonoTone_EggShell = 0x36,
	SA2BHat_OrangeShiny_MonoTone_EggShell = 0x37,
	SA2BHat_BlackShiny_MonoTone_EggShell = 0x38,
	SA2BHat_YellowShiny_TwoTone_EggShell = 0x39,
	SA2BHat_WhiteShiny_TwoTone_EggShell = 0x3A,
	SA2BHat_BrownShiny_TwoTone_EggShell = 0x3B,
	SA2BHat_SkyBlueShiny_TwoTone_EggShell = 0x3C,
	SA2BHat_PinkShiny_TwoTone_EggShell = 0x3D,
	SA2BHat_BlueShiny_TwoTone_EggShell = 0x3E,
	SA2BHat_GreyShiny_TwoTone_EggShell = 0x3F,
	SA2BHat_GreenShiny_TwoTone_EggShell = 0x40,
	SA2BHat_RedShiny_TwoTone_EggShell = 0x41,
	SA2BHat_LimeGreenShiny_TwoTone_EggShell = 0x42,
	SA2BHat_PurpleShiny_TwoTone_EggShell = 0x43,
	SA2BHat_OrangeShiny_TwoTone_EggShell = 0x44,
	SA2BHat_BlackShiny_TwoTone_EggShell = 0x45,
	SA2BHat_GlitchyNormalEggShell = 0x46,
};

enum ChaoSeed : __int8
{
	ChaoSeed_None = -1,
	ChaoSeed_StrongSeed = 0x0,
	ChaoSeed_TastySeed = 0x1,
	ChaoSeed_HeroSeed = 0x2,
	ChaoSeed_DarkTheme = 0x3,
	ChaoSeed_RoundSeed = 0x4,
	ChaoSeed_TriangleTheme = 0x5,
	ChaoSeed_SquareSeed = 0x6,
};

enum Theme : __int8
{
	Theme_Omochao = 0x0,
	Theme_Amy = 0x1,
	Theme_Maria = 0x2,
};

enum Menus : __int32
{
	Menus_TitleScreen = 0x0,
	Menus_Main = 0x1,
	Menus_StorySelect = 0x2,
	Menus_StageSelect = 0x3,
	Menus_Old2PBattle = 0x4,
	Menus_Unknown_5 = 0x5,
	Menus_Settings = 0x6,
	Menus_Unknown_7 = 0x7,
	Menus_SoundTest = 0x8,
	Menus_FileSelect = 0x9,
	Menus_Kart = 0xA,
	Menus_DownloadEventMaybe = 0xB,
	Menus_BossAttack = 0xC,
	Menus_Tutorial = 0xD,
	Menus_Unknown_E = 0xE,
	Menus_Emblems = 0xF,
	Menus_Battle = 0x10,
	Menus_Unknown_11 = 0x11,
	Menus_Unknown_12 = 0x12,
	Menus_Unknown_13 = 0x13,
	Menus_Unknown_14 = 0x14,
	Menus_Controls = 0x15,
	Menus_BonusVideo = 0x16,
	Menus_HowToPlay = 0x17,
	Menus_Unknown_18 = 0x18,
};

enum DispAction : __int8
{
	DispAction_Initialize = 0x0,
	DispAction_Transition = 0x1,
	DispAction_YesNo = 0x2,
	DispAction_Exit = 0x3,
	DispAction_Continue = 0x4,
	DispAction_Restart = 0x5,
};

enum SA2BLobbyUnlocks
{
	SA2BLobbyUnlocks_Unknown_A = 0x1,
	SA2BLobbyUnlocks_NeutralGarden = 0x2,
	SA2BLobbyUnlocks_Kindergarten = 0x4,
	SA2BLobbyUnlocks_Unknown_B = 0x8,
	SA2BLobbyUnlocks_HeroGarden = 0x10,
	SA2BLobbyUnlocks_Unknown_C = 0x20,
	SA2BLobbyUnlocks_DarkGarden = 0x40,
	SA2BLobbyUnlocks_Unknown_D = 0x80,
};

enum Actions
{
	Action_None,
	Action_Run,
	Action_SpiralLoop,  // Used at the end of Radical Highway
	Action_SpinCharge = 3,
	Action_SpinRelease,
	Action_Jump = 6,
	Action_Spring, // Movement via stick input is allowed
	Action_SpringLock, // Trajectory cannot be influenced until the set path is finished
	Action_Launch, // Used for the rocket in Metal Harbor and the vines in Green Forest/White Jungle
	Action_Fall, // The panels that make you soar in Metal Harbor (black, blue, and red ones) use this, as well. Also pit floating.
	Action_Balancing,
	Action_Skid,
	Action_HomingAttack,
	Action_Push,
	Action_Pain,
	Action_WallBump,
	Action_SlideGrounded, // Used when neutral sticking on surfaces where you can't stand still on (CW's pyramids, DL's underwater columns, IG's elevator's ramps and MH's starting ramp)
	Action_ObjectControl = 18,
	Action_PickUp,
	Action_PutDown,
	Action_HoldObject,
	Action_GrabObject, // Pushable/pullable boxes in Wild Canyon. Only set when facing toward the object.
	Action_GrabObject2, // Only set when facing away from the object
	Action_ReleaseObject,
	Action_MoveWithObject = 25,
	Action_ThrowGrounded,
	Action_SkidWithObject = 27,
	Action_FallWithObject,
	Action_JumpWithObject,
	Action_SpringWithObject, // Movement via stick input is allowed
	Action_SpringLockWithObject, // Trajectory cannot be influenced until the set path is finished
	Action_PullObject = 32, // Boxes in Wild Canyon, like Action_GrabObject
	Action_ThrowMidair,
	Action_ShakeTree,
	Action_ShakeObject = 35,
	Action_Bound = 38, // Caught by ghost or blue shot from GUN robot
	Action_LedgeGrab,
	Action_StepUp = 40, // Stepping up to ledges
	Action_Whistle = 42,
	Action_Pet,
	Action_ThrowChaoOnMachine,
	Action_ActivateMM,
	Action_ActivateMMFail,
	Action_MysticMelodyFail = 47,
	Action_LookAtMMShrine,
	Action_MonitorLook = 50,
	Action_Pulley,
	Action_WaterSlide,
	Action_MysticMelody = 53, // These actions disable player inputs until the associated animation finishes
	Action_Sunglasses = Action_MysticMelody,
	Action_GhostScare = Action_Sunglasses,
	Action_AirBubble = Action_GhostScare,
	Action_CutsceneAnimation, // Used before 2p matches, using powerups on 2p mode and mini-event cutscenes
	Action_Drown,
	Action_Quicksand,
	Action_Death = 57,
	Action_Noclip, // Doesn't work for Knuckles.
	Action_LightDash,
	Action_Glide = Action_LightDash,
	Action_TailsFly = Action_Glide,
	Action_SuperStand = Action_TailsFly,
	Action_MechHover,
	Action_LightAttack = Action_MechHover,
	Action_MechlessAttack = Action_LightAttack,
	Action_SuperMove = Action_MechlessAttack,
	Action_Somersault1,
	Action_Dig = Action_Somersault1,
	Action_SuperMoveUp = Action_Dig, // pressing A while standing still
	Action_MechPunch,
	Action_DigFinish = Action_MechPunch,
	Action_SuperMoveDown = Action_DigFinish,
	Action_Somersault2,
	Action_SuperBoostUp = Action_Somersault2, // pressing A while moving
	Action_SomersaultFinish,
	Action_SuperBoostDown = Action_SomersaultFinish,
	Action_DigOnWall,
	Action_SomersaultCancel = Action_DigOnWall,
	Action_MovingSomersault1,
	Action_DigFinishOnWall = Action_MovingSomersault1,
	Action_MovingSomersault2,
	Action_DigFailOnWall,
	Action_MovingSomersaultFinish = Action_DigFailOnWall, // This pops up before Action_SomersaultFinish if you somersault while moving. Kinda weird.
	Action_BounceDown,
	Action_Climb = Action_BounceDown,
	Action_BounceUp,
	Action_ClimbUpLedge = Action_BounceUp,
	Action_Grind,
	Action_Punch = Action_Grind,
	Action_Hang,
	Action_Punch2 = Action_Hang,
	Action_Punch3,
	Action_RailTrick = Action_Punch3,
	Action_MagicHands,
	Action_Punch1Run = Action_MagicHands,
	Action_Trick,
	Action_Punch2Run = Action_Trick,
	Action_Board,
	Action_Punch3Run = Action_Board,
	Action_SpiralUpper,
	Action_BoardBrake,
	Action_DrillClaw = Action_BoardBrake,
	Action_BoardFall,
	Action_Swim = Action_BoardFall,
	Action_BoardJump,
	Action_SwimMove = Action_BoardJump,
	Action_BoardTrick,
	Action_SwimSink = Action_BoardTrick,
	Action_BoardBump,
	Action_GravitySwitch,
	Action_TurtleDive = 86,
	Action_TurtleGrab,
	Action_BlackShield = Action_TurtleGrab,
};

enum StoryEntryType
{
	StoryEntryType_Event = 0x0,
	StoryEntryType_Level = 0x1,
	StoryEntryType_End = 0x2,
	StoryEntryType_Credits = 0x3,
};

enum SurfaceFlags : uint32_t
{
	SurfaceFlag_Solid = 0x1,
	SurfaceFlag_Water = 0x2,
	SurfaceFlag_Diggable = 0x20,
	SurfaceFlag_Unclimbable = 0x80,
	SurfaceFlag_Stairs = 0x100, // treat the surface as flat
	SurfaceFlag_Hurt = 0x400,
	SurfaceFlag_FeetSound = 0x800,
	SurfaceFlag_CannotLand = 0x1000,
	SurfaceFlag_WaterNoAlpha = 0x2000,
	SurfaceFlag_NoShadow = 0x8000,
	SurfaceFlag_Accelerate = 0x100000,
	SurfaceFlag_NoFog = 0x400000,
	SurfaceFlag_Dynamic = 0x8000000,
	SurfaceFlag_Unknown1 = 0x20000000, // Usually medium-sized collisions
	SurfaceFlag_Unknown2 = 0x40000000, // Usually small-sized collisions
	SurfaceFlag_Visible = 0x80000000
};

enum CollisionShapes : unsigned __int8
{
	CollisionShape_Sphere,
	CollisionShape_Cyl1,
	CollisionShape_Cyl2,
	CollisionShape_Cube1,
	CollisionShape_Cube2,
	CollisionShape_Capsule = 0x6,
	CollisionShape_Wall = 0x9
};

enum CollisionLists
{
	CollisionList_Players,
	CollisionList_Projectiles,
	CollisionList_Targetable,
	CollisionList_Enemies,
	CollisionList_Regular,
	CollisionList_Unknown_5,
	CollisionList_Rings,
	CollisionList_Unknown_7,
	CollisionList_Unknown_8,
	CollisionList_Chao
};

enum DemoState : unsigned __int8
{
	DemoState_None,
	DemoState_Playback,
	DemoState_Recording
};

enum GravityDirectionType
{
	DownwardX,
	UpwardX,
	DownwardY,
	UpwardY,
	DownwardZ,
	UpwardZ
};

enum SoundFlags : unsigned __int16
{
	SndFlag_Unknown1 = 0x1,
	SndFlag_Unknown2 = 0x2,
	SndFlag_Remove = 0x4,
	SndFlag_Unknown8 = 0x8,
	SndFlag_AutoVolume = 0x10,
	SndFlag_ForceVolume = 0x20,
	SndFlag_AutoPanning = 0x40,
	SndFlag_ForcePanning = 0x80,
	SndFlag_AutoDist = 0x100,
	SndFlag_ForceDist = 0x200,
	SndFlag_Unknown400 = 0x400,
	SndFlag_Unknown800 = 0x800,
	SndFlag_Unknown1000 = 0x1000,
	SndFlag_Unknown2000 = 0x2000,
	SndFlag_SecondaryTimer = 0x4000
};

enum CameraModes
{
	CameraMode_None,
	CameraMode_User,
	CameraMode_Follow,
	CameraMode_Knuckles,
	CameraMode_Editor,
	CameraMode_Editor2,
	CameraMode_Snapshot,
	CameraMode_Klamath,
	CameraMode_Point,
	CameraMode_Ashland,
	CameraMode_Fix,
	CameraMode_Leave,
	CameraMode_Space,
	CameraMode_Carmel,
	CameraMode_Motion,
	CameraMode_BossInit,
	CameraMode_BossPoint,
	CameraMode_Collision,
	CameraMode_Pstone,
	CameraMode_Init,
	CameraMode_Easyset,
	CameraMode_BossKlamath,
	CameraMode_Gakugaku,
	CameraMode_Knuckles_L,
	CameraMode_Fix2,
	CameraMode_Pstone2,
	CameraMode_SS,
	CameraMode_Colli_LR
};

enum CameraAdjust
{
	CameraAdjust_None,
	CameraAdjust_User,
	CameraAdjust_Half,
	CameraAdjust_Three1,
	CameraAdjust_Three2,
	CameraAdjust_Three3,
	CameraAdjust_Three4,
	CameraAdjust_Three5,
	CameraAdjust_Relative1,
	CameraAdjust_Relative2,
	CameraAdjust_Relative3,
	CameraAdjust_Relative4,
	CameraAdjust_Relative5,
	CameraAdjust_Relative6
};

enum Languages
{
	Language_Japanese,
	Language_English,
	Language_French,
	Language_Spanish,
	Language_German,
	Language_Italian
};

enum class eCHAO_STATS : Uint8
{
	Swm = 0,
	Fly = 1,
	Run = 2,
	Pwr = 3,
	Stm = 4,
	Lck = 5,
	Int = 6,
	Unk = 7
};

enum class eCHAO_TYPE : Uint8
{
	Empty = 0x0,
	Egg = 0x1,
	Child = 0x2,
	Good = 0x3,
	Bad = 0x4,
	Neut_Normal = 0x5,
	Hero_Normal = 0x6,
	Dark_Normal = 0x7,
	Neut_Swim = 0x8,
	Hero_Swim = 0x9,
	Dark_Swim = 0xA,
	Neut_Fly = 0xB,
	Hero_Fly = 0xC,
	Dark_Fly = 0xD,
	Neut_Run = 0xE,
	Hero_Run = 0xF,
	Dark_Run = 0x10,
	Neut_Power = 0x11,
	Hero_Power = 0x12,
	Dark_Power = 0x13,
	Neut_Chaos = 0x14,
	Hero_Chaos = 0x15,
	Dark_Chaos = 0x16,
	Tails = 0x17,
	Knuckles = 0x18,
	Amy = 0x19
};

enum class eCHAO_GARDENS : Sint8
{
	None = -1,
	Neut = 1,
	Hero = 2,
	Dark = 3,
	SSDX = 4,
	ECDX = 5,
	MRDX = 6
};

enum class eCHAO_ICON : Uint8
{
	Normal = 0x00,
	Flame = 0x01,
	None = 0x02,
};

enum class eCHAO_MASK : Uint8
{
	None = 0x00,
	Pumpkin = 0x01,
	Skull = 0x02,
	Apple = 0x03,
	Bucket = 0x04,
	EmptyCan = 0x05,
	CardboardBox = 0x06,
	FlowerPot = 0x07,
	PaperBag = 0x08,
	Pan = 0x09,
	Stump = 0x0A,
	Watermelon = 0x0B,
	WoolBeany_Red = 0x0C,
	WoolBeany_Blue = 0x0D,
	WoolBeany_Black = 0x0E,
	Pacifier = 0x0F,
	Egg_Normal = 0x10,
	Egg_Yellow_MT = 0x11,
	Egg_White_MT = 0x12,
	Egg_Brown_MT = 0x13,
	Egg_SkyBlue_MT = 0x14,
	Egg_Pink_MT = 0x15,
	Egg_Blue_MT = 0x16,
	Egg_Gray_MT = 0x17,
	Egg_Green_MT = 0x18,
	Egg_Red_MT = 0x19,
	Egg_Lime_MT = 0x1A,
	Egg_Purple_MT = 0x1B,
	Egg_Orange_MT = 0x1C,
	Egg_Black_MT = 0x1D,
	Egg_Yellow_TT = 0x1E,
	Egg_White_TT = 0x1F,
	Egg_Brown_TT = 0x20,
	Egg_SkyBlue_TT = 0x21,
	Egg_Pink_TT = 0x22,
	Egg_Blue_TT = 0x23,
	Egg_Gray_TT = 0x24,
	Egg_Green_TT = 0x25,
	Egg_Red_TT = 0x26,
	Egg_Lime_TT = 0x27,
	Egg_Purple_TT = 0x28,
	Egg_Orange_TT = 0x29,
	Egg_Black_TT = 0x2A,
	Egg_Normal_Shiny = 0x2B,
	Egg_Yellow_SMT = 0x2C,
	Egg_White_SMT = 0x2D,
	Egg_Brown_SMT = 0x2E,
	Egg_SkyBlue_SMT = 0x2F,
	Egg_Pink_SMT = 0x30,
	Egg_Blue_SMT = 0x31,
	Egg_Gray_SMT = 0x32,
	Egg_Green_SMT = 0x33,
	Egg_Red_SMT = 0x34,
	Egg_Lime_SMT = 0x35,
	Egg_Purple_SMT = 0x36,
	Egg_Orange_SMT = 0x37,
	Egg_Black_SMT = 0x38,
	Egg_Yellow_STT = 0x39,
	Egg_White_STT = 0x3A,
	Egg_Brown_STT = 0x3B,
	Egg_SkyBlue_STT = 0x3C,
	Egg_Pink_STT = 0x3D,
	Egg_Blue_STT = 0x3E,
	Egg_Gray_STT = 0x3F,
	Egg_Green_STT = 0x40,
	Egg_Red_STT = 0x41,
	Egg_Lime_STT = 0x42,
	Egg_Purple_STT = 0x43,
	Egg_Orange_STT = 0x44,
	Egg_Black_STT = 0x45,
	Egg_Gold = 0x46,
	Egg_Silver = 0x47,
	Egg_Ruby = 0x48,
	Egg_Sapphire = 0x49,
	Egg_Emerald = 0x4A,
	Egg_Amethyst = 0x4B,
	Egg_Aquamarine = 0x4C,
	Egg_Garnet = 0x4D,
	Egg_Onyx = 0x4E,
	Egg_Peridot = 0x4F,
	Egg_Topaz = 0x50,
	Egg_Pearl = 0x51,
	Egg_Metal1 = 0x52,
	Egg_Metal2 = 0x53,
	Egg_Glass = 0x54,
};

enum class eHEAD_PARTS : Uint8
{
	NONE = 0,
	PUMPKIN = 1,
	SKULL = 2,
	APPLE = 3,
	BUCKET = 4,
	CAN = 5,
	CDBOX = 6,
	FLOWERPOT = 7,
	PAPERBAG = 8,
	STEWPAN = 9,
	STUMP = 10,
	WMELON = 11,
	WOOL_A = 12, // Red
	WOOL_B = 13, // Blue
	WOOL_C = 14, // Black
	TEETHINGRING = 15,

	EGG = 16,
	EGG_Yellow = 17,
	EGG_White = 18,
	EGG_Brown = 19,
	EGG_SkyBlue = 20,
	EGG_Pink = 21,
	EGG_Blue = 22,
	EGG_Gray = 23,
	EGG_Green = 24,
	EGG_Red = 25,
	EGG_AppleGreen = 26,
	EGG_Purple = 27,
	EGG_Orange = 28,
	EGG_Black = 29,

	EGG_BlendYellow = 30,
	EGG_BlendWhite = 31,
	EGG_BlendBrown = 32,
	EGG_BlendSkyBlue = 33,
	EGG_BlendPink = 34,
	EGG_BlendBlue = 35,
	EGG_BlendGray = 36,
	EGG_BlendGreen = 37,
	EGG_BlendRed = 38,
	EGG_BlendAppleGreen = 39,
	EGG_BlendPurple = 40,
	EGG_BlendOrange = 41,
	EGG_BlendBlack = 42,

	EGG_ShinyNormal = 43,
	EGG_ShinyYellow = 44,
	EGG_ShinyWhite = 45,
	EGG_ShinyBrown = 46,
	EGG_ShinySkyBlue = 47,
	EGG_ShinyPink = 48,
	EGG_ShinyBlue = 49,
	EGG_ShinyGray = 50,
	EGG_ShinyGreen = 51,
	EGG_ShinyRed = 52,
	EGG_ShinyAppleGreen = 53,
	EGG_ShinyPurple = 54,
	EGG_ShinyOrange = 55,
	EGG_ShinyBlack = 56,

	EGG_ShinyBlendNormal = 57,
	EGG_ShinyBlendYellow = 58,
	EGG_ShinyBlendWhite = 59,
	EGG_ShinyBlendBrown = 60,
	EGG_ShinyBlendSkyBlue = 61,
	EGG_ShinyBlendPink = 62,
	EGG_ShinyBlendBlue = 63,
	EGG_ShinyBlendGray = 64,
	EGG_ShinyBlendGreen = 65,
	EGG_ShinyBlendRed = 66,
	EGG_ShinyBlendAppleGreen = 67,
	EGG_ShinyBlendPurple = 68,
	EGG_ShinyBlendOrange = 69,
	EGG_ShinyBlendBlack = 70,

	EGG_Gold = 0x46,
	EGG_Silver = 0x47,
	EGG_Ruby = 0x48,
	EGG_Sapphire = 0x49,
	EGG_Emerald = 0x4A,
	EGG_Amethyst = 0x4B,
	EGG_Aquamarine = 0x4C,
	EGG_Garnet = 0x4D,
	EGG_Onyx = 0x4E,
	EGG_Peridot = 0x4F,
	EGG_Topaz = 0x50,
	EGG_Pearl = 0x51,
	EGG_Env0 = 0x52, // Metal 1
	EGG_Env1 = 0x53, // Metal 2
	EGG_Env2 = 0x54, // Glass
	END = 0x55
};

enum class eMEDAL_PARTS : Uint8
{
	NONE = 0x00,
	AQU = 0x01,
	TOP = 0x02,
	PER = 0x03,
	GAR = 0x04,
	ONY = 0x05,
	DIA = 0x06,
	SILVER = 0x07, // Beginner 
	GOLD = 0x08,   // Challenge
	HERO = 0x09,
	DARK = 0x0A,
	PERAL = 0x0B,
	AME = 0x0C,
	EME = 0x0D,
	RUB = 0x0E,
	SAP = 0x0F
};

enum class eAL_COLOR : Sint8
{
	NORMAL = 0x00,
	YELLOW = 0x01,
	WHITE = 0x02,
	BROWN = 0x03,
	SKYBLUE = 0x04,
	PINK = 0x05,
	BLUE = 0x06,
	GRAY = 0x07,
	GREEN = 0x08,
	RED = 0x09,
	APPLEGREEN = 0x0A,
	PURPLE = 0x0B,
	ORANGE = 0x0C,
	BLACK = 0x0D,
	INVIS_1 = 0x0E,
	INVIS_2 = 0x0F,
	HYPER = 0x10,
	POWDERBLUE = 0x15,
	WHITE_UNUSED = 0x1D,
	DARKGRAY = 0x1E,
	DEEPBLUE = 0x52,
};

enum class eCHAO_EGGS : Uint8
{
	Normal = 0x0,
	Yellow_MT = 0x1,
	White_MT = 0x2,
	Brown_MT = 0x3,
	Aqua_MT = 0x4,
	Pink_MT = 0x5,
	Blue_MT = 0x6,
	Gray_MT = 0x7,
	Green_MT = 0x8,
	Red_MT = 0x9,
	LightGreen_MT = 0xA,
	Purple_MT = 0xB,
	Orange_MT = 0xC,
	Black_MT = 0xD,
	Yellow_TT = 0xE,
	White_TT = 0xF,
	Brown_TT = 0x10,
	Aqua_TT = 0x11,
	Pink_TT = 0x12,
	Blue_TT = 0x13,
	Gray_TT = 0x14,
	Green_TT = 0x15,
	Red_TT = 0x16,
	LightGreen_TT = 0x17,
	Purple_TT = 0x18,
	Orange_TT = 0x19,
	Black_TT = 0x1A,
	Normal_Shiny = 0x1B,
	Yellow_SMT = 0x1C,
	White_SMT = 0x1D,
	Brown_SMT = 0x1E,
	Aqua_SMT = 0x1F,
	Pink_SMT = 0x20,
	Blue_SMT = 0x21,
	Gray_SMT = 0x22,
	Green_SMT = 0x23,
	Red_SMT = 0x24,
	LightGreen_SMT = 0x25,
	Purple_SMT = 0x26,
	Orange_SMT = 0x27,
	Black_SMT = 0x28,
	Yellow_STT = 0x29,
	White_STT = 0x2A,
	Brown_STT = 0x2B,
	Aqua_STT = 0x2C,
	Pink_STT = 0x2D,
	Blue_STT = 0x2E,
	Gray_STT = 0x2F,
	Green_STT = 0x30,
	Red_STT = 0x31,
	LightGreen_STT = 0x32,
	Purple_STT = 0x33,
	Orange_STT = 0x34,
	Black_STT = 0x35,
	Gold = 0x36,
	Silver = 0x37,
	Ruby = 0x38,
	Sapphire = 0x39,
	Emerald = 0x3A,
	Amethyst = 0x3B,
	Aquamarine = 0x3C,
	Garnet = 0x3D,
	Onyx = 0x3E,
	Peridot = 0x3F,
	Topaz = 0x40,
	Pearl = 0x41,
	Metal1 = 0x42,
	Metal2 = 0x43,
	Glass = 0x44,
};

enum class eCHAO_BODYTYPE : Uint8
{
	Normal = 0x0,
	EggChao = 0x1,
	Omochao = 0x2,
	None = 0x3,
};

enum class eCHAO_JEWEL : Uint8
{
	None = 0x0,
	Gold = 0x1,
	Silver = 0x2,
	Ruby = 0x3,
	Sapphire = 0x4,
	Emerald = 0x5,
	Amethyst = 0x6,
	Aquamarine = 0x7,
	Garnet = 0x8,
	Onyx = 0x9,
	Peridot = 0xA,
	Topaz = 0xB,
	Pearl = 0xC,
	Metal1 = 0xD,
	Metal2 = 0xE,
	Glass = 0xF,
	Moon = 0x10,
	DCMetal1 = 0x15,
	DCMetal2 = 0x16,
};

enum class eAL_PLAYER_BTL
{
	SONIC = 0,
	SHADOW = 1,
	TAILS = 2,
	EGGMAN = 3,
	KNUCKLES = 4,
	ROUGE = 5,
	NB_PLAYER = 6
};

enum class eAL_PLAYER_DX
{
	SONIC = 0,
	TAILS = 1,
	KNUCKLES = 2,
	AMY = 3,
	E102 = 4,
	BIG = 5,
	NB_PLAYER = 6
};

enum class eBODY_PARTS : Uint8
{
	NONE = 0,
	SPECTOR = 1,
	END = 2
};

enum class eCHAO_PARTS : Uint8
{
	Arm = 0,
	Ear = 1,
	Forehead = 2,
	Horn = 3,
	Feet = 4,
	Tail = 5,
	Wings = 6,
	Tongue = 7
};

enum class eCHAO_MINIMALS : Sint8
{
	None = -1,

	Penguin = 0x0,
	Seal = 0x1,
	Otter = 0x2,
	Rabbit = 0x3,
	Cheetah = 0x4,
	Warthog = 0x5,
	Bear = 0x6,
	Tiger = 0x7,
	Gorilla = 0x8,
	Peacock = 0x9,
	Parrot = 0xA,
	Condor = 0xB,
	Skunk = 0xC,
	Sheep = 0xD,
	Raccoon = 0xE,
	HalfFish = 0xF,
	SkeletonDog = 0x10,
	Bat = 0x11,
	Dragon = 0x12,
	Unicorn = 0x13,
	Phoenix = 0x14,
	YellowChaosDrive = 0x15,
	GreenChaosDrive = 0x16,
	RedChaosDrive = 0x17,
	PurpleChaosDrive = 0x18,

	DX_Seal = 0x0,
	DX_Penguin = 0x1,
	DX_Otter = 0x2,
	DX_Peacock = 0x3,
	DX_Swallow = 0x4,
	DX_Parrot = 0x5,
	DX_Deer = 0x6,
	DX_Rabbit = 0x7,
	DX_Kangaroo = 0x8,
	DX_Gorilla = 0x9,
	DX_Lion = 0xA,
	DX_Elephant = 0xB,
	DX_Mole = 0xC,
	DX_Koala = 0xD,
	DX_Skunk = 0xE,
};

#undef SING

enum class eKW_BHV
{
	ART = 0,
	DANCE = 1,
	SING = 2,
	MUSIC = 3,
	MINI1 = 4,
	MINI2 = 5,
	MINI3 = 6,
	MINI4 = 7,
	MINI5 = 8,
	MINI6 = 9,
	MINI7 = 0xA,
	MINI8 = 0xB,
	MINI9 = 0xC,
	MINI10 = 0xD,
	MINI11 = 0xE,
	MINI12 = 0xF,
	MINI13 = 0x10,
	MINI14 = 0x11,
	MINI15 = 0x12,
	MINI16 = 0x13,
	MINI17 = 0x14,
	MINI18 = 0x15,
	TOY1 = 0x16,
	TOY2 = 0x17,
	TOY3 = 0x18,
	TOY4 = 0x19,
	TOY5 = 0x1A,
	TOY6 = 0x1B,
	TOY7 = 0x1C,
	TOY8 = 0x1D,
	TOY9 = 0x1E,
	TOY10 = 0x1F,
	TOY11 = 0x20,
	FLY = 0x21,
	SWIM = 0x22,
	CLIMB_TREE = 0x23,
	CLIMB_WALL = 0x24,
	WATER = 0x25,
	SWING = 0x26,
	SIT = 0x27,
	DENGURI = 0x28,
	TOILET = 0x29,
	PYON = 0x2A,
	BOWLING = 0x2B,
	FUKKIN = 0x2C,
	SHIRIFURI = 0x2D,
	OJIGI = 0x2E,
	CHIWA = 0x2F,
	NADERU = 0x30,
	AGERU = 0x31,
	TALK = 0x32,
	PUNCH = 0x33,
	OKOSU = 0x34,
	TEFURI = 0x35,
	HAKUSYU = 0x36,
	SURIYORU = 0x37,
	AKANBE = 0x38,
	WA = 0x39,
	NAGERU = 0x3A,
	FIGHT = 0x3B,
	IGAMI = 0x3C,
	LISTEN = 0x3D,
	WATCH = 0x3E
};

enum class eAL_MOUTH_NUM : Uint8
{
	NONE = 0,
	SHARK = 1, // "TOOTHY GRIN"
	HOYO = 2, // "OPEN"
	NIKO = 3, // "V SMILE"
	MUSU = 4, // "V FROWN"
	WAAI = 5, // "OPEN SMILE"
	UEEN = 6, // "OPEN FROWN"
	NEE = 7,
	KOIKE = 8, // "SQUIGGLE"
	GEE = 9, // "TOOTHY FROWN"
	MUU = 10,
	UWAAN = 11, // "WIDE OPEN"
	INO = 12,
	HIGI_1 = 13, // "STACHE 1" 
	HIGI_2 = 14, // "STACHE 2" 
	HIGI_3 = 15 // "STACHE 3" 

	//END = 13
};

enum class eCHAO_FLAGS
{
	UseMove = 0x02,
	UseMotionTable = 0x04,
	HaveCollision = 0x08,
	RunBehaviourHandler = 0x10,
	CanJiggle = 0x20,
	CanRender = 0x0200,
	AnotherJiggleThing = 0x1000,
	RunThinkController = 0x2000,
	Timescale = 0x020000,
	DrawIcon = 0x100000,
};

enum class eCHAO_ICON_EMOTE
{
	MATE,
	HUNGER,
	FEAR,
	ILLNESS
};

enum class eINTENTION
{
	NONE = 0,
	THINK = 1,
	AKUBI = 2,
	SLEEP = 3,
	GOO = 4,
	GET_FRUIT = 5,
	EAT = 6,
	HIMA = 7,
	PLAY = 8,
	WALKING = 9,
	MAYU = 10,
	NEST = 11,
	DEAD = 12,
	MUSIC = 13,
	ART = 14,
	STOY = 15,
	LTOY = 16,
	JOY = 17,
	NB_INTENTION = 18
};

enum class eAL_MOTION : int
{
	STAND,
	OSYABURI,
	HATENA_HATE, // HATENA == think
	HATENA_HATE2,
	HATENA_AEARE,
	HATENA_MODORU,
	HIMATATI_PATA,
	HIMATATI_PATA_LOOP,
	HIMATATI_PATA2MOJI,
	HIMATATI_MOJI,
	HIMATATI_END,
	OSYABURI_S,
	OSYABURI_L,
	HIRAMEKI,
	HIRAMEKI_END,
	SIT_AKUBI,
	SIT_AKUBI_LOOP,
	SIT_AKUBI_END,
	SLEEP,
	SLEEP_LOOP,
	SIT_SLEEP,
	MEKOSURI,
	UTOUTO,
	UTOUTO_KOKKURI,
	UTUBUSE_NEGAERI,
	UTUBUSE_SLEEP,
	UTUBUSE_END,
	DAINOJI,
	DAINOJI_NOBI,
	DAINOJI_LOOP,
	NOBI_SIT,
	NERU_PORI_R,
	NERU_PORI_R_LOOP,
	NERU_PORI_R_END,
	NERU_PORI_L,
	NERU_PORI_L_LOOP,
	NERU_PORI_L_END,
	BATAN,
	JUMP_UP,
	AKUBI,
	AKUBI_LOOP,
	AKUBI_END,
	OKIRU,
	OKIRU_BURU_LOOP,
	OKIRU_AKUBI,
	OKIRU_AKUBI_LOOP,
	OKIRU_END,
	GENKI_SUWARI,
	GENKI_TATI,
	PORIPORI_TATI,
	PORIPORI_TATI_LOOP,
	PORIPORI_TATI_END,
	NEGAERI_L,
	NEGAERI_L_UTUBUSE,
	NEGAERI_L_RETURN,
	NEGAERI_R,
	NEGAERI_R_UTUBUSE,
	NEGAERI_R_RETURN,
	OTAKAI_L,
	OTAKAI_L_LOOP,
	OTAKAI_R,
	OTAKAI_R_LOOP,
	HIMA_SIT,
	HIMA_SIT_GUDE,
	HIMA_SIT_PATA,
	HIMA_SIT_PATAPATA,
	HIMA_SIT_SWING,
	HIMA_SIT_LOOK_R,
	HIMA_SIT_LOOK_L,
	HIMA_SIT_R2L,
	HIMA_SIT_L2R,
	HIMA_SIT_PORI,
	HIMA_SLEEP_UPDOWN,
	HIMA_SLEEP_BURABURA,
	HIMA_SLEEP_TWIST,
	HIMA_SLEEP_ALTER,
	HIMA_SLEEP_BREATH,
	HIMA_UTUBUSE_PATA,
	HIMA_UTUBUSE_PATA_LOOP,
	HIMA_UTUBUSE_END,
	SITDOWN,
	SITDOWN_SLOW,
	STANDUP,
	STANDUP_SHIRI,
	NOBI_STAND,
	SLEEP_KUBI,
	SLEEP_KUBI_LOOP,
	SLEEP_KUBI_PORI,
	SLEEP_KUBI_PORI_LOOP,
	SLEEP_KUBI_END,
	NAKINEIRI_BREATH,
	NAKINEIRI_HIKKU,
	NAKINEIRI_HIKKUHIKKU,
	NAKINEIRI_MEOSMESO,
	GUTA_A, // Hunger
	GUTA_B,
	GUTA_C,
	GUTA_D,
	ONSEN_LOOP,
	ONSEN_FUU,
	ARUKU,  // Walk
	HASIRU, // HASIRU == Run
	HASIRU_HIROGE, // Run Broad AKA Sprint Animation
	HASIRU_FURIMUKI, // Run Turnaround
	SHINOBI,
	TOBOTOBO,
	RUN_BANZAI,
	RUN_BANZAI2,
	RUN_BANZAI_LOOP,
	RUN_BANZAI_END,
	HAIHAI_KOKE,
	HAIHAI_SHIRI_UP,
	HAIHAI_SHIRI_DOWN,
	HAIHAI_SORU_UP,
	HAIHAI_SORU_DOWN,
	HAIHAI,
	HAIHAI_LOOP,
	SKIP,
	OIKAKE,
	RUN,
	//FURIMUKI_HASIRI_L,      // Turn around // DX only
	//FURIMUKI_HASIRI_L_LOOP,
	//FURIMUKI_HASIRI_L_END,
	RHYTHM_WALK_A,
	RHYTHM_WALK_B,
	BRAKE,
	BRAKE_LOOP,
	BRAKE_BATABATA,
	ANGER_WALK,
	ANGER_WALK_CHIKUSYOU,
	YORO_WALK,
	YORO_WALK_LOOP,
	DASH,
	TOBU,
	TOBIAGARU,
	LOOKUP_JUMP,
	LOOKUP_JUMP_LOOP,
	LOOKUP_JUMP_LANDING,
	LOOKDOWN_JUMP,
	LOOKDOWN_JUMP_LOOP,
	LOOKDOWN_JUMP_LANDING,
	HABATOBI_JUMP,
	HABATOBI_AIR,
	HABATOBI_LANDING,
	HABATOBI_BOUND,
	OBORERU,    // Drowning
	BATAASHI,	// Flutter kick (swimming)
	BATAASHI_IKITUGI,
	CRAWL,
	SEOYOGI_KAITEN,
	SEOYOGI,
	BATAASHI_B, // Swim slowly
	CRAWL_B,    // Swim Difficult
	DRIFT,
	DOZAEMON,
	PUHA_ALL,
	PUHA_RISE,
	PUHA_PUHA,
	NOBORU, // Normal Climb // 155
	NOBORIKIRU, // Climb_End
	CLIMB, // Difficult Climb
	CLIMB_END,
	KOKE, // moss
	KOKEOKI,
	SHIRIKOKE_AIR,
	SHIRIKOKR_LAND,
	GOO,
	MANPUKU,
	MANPUKU_LOOP,
	MANPUKU_SURI,
	MANPUKU_SURILOOP,
	MANPUKU_END,
	TABERU_SUWARU,
	TABERU_TATU,
	TABERU_TABERU,
	TABERU_MIAGE,
	TABERU_MODORU,
	EAT_SITDOWN,
	EAT,
	EAT_LOOKUP_R,
	EAT_LOOKUP_L,
	EAT_PEPPE,
	EAT_GATUGATU,
	EAT_KUNKUN,
	EAT_KUNKUN_LOOP,
	EAT_KUNKUN_UPPER,
	EAT_TUMARU,
	EAT_TUMARU_LOOP,
	EAT_TUMARU_END,
	SUTERU_SIT,
	KUNKUN_TATI,
	HIROU_KAGAMU,
	HIROU_AGERU,
	MOTU,
	HAKOBU,
	SUTERU_STAND,
	OTOSU,
	OTOSU_MIRU,
	OTOSU_AWATE,
	OTOSU_ASHIKAKAE,
	OTOSU_ASHIKAKAE_LOOP,
	OTOSU_END,
	KABURU,
	KABURU_END,
	THROW,
	CAPTURE_MORAU,
	CAPTURE_SURISURI,
	CAPTURE_KURUN,
	UMARERU_KYORO,
	UMARERU_PON,
	ESAJUMP,
	ESAJUMP_AIR,
	ESAJUMP_FALL,
	ESAJUMP_LAND,
	YURASU_TUKAMU,
	YURASU_TUKAMI,
	YURASU_SWING,
	YURASU_END,
	LOOKUP,
	LOOKUP_LOOP,
	LOOKUP_KASHIGE,
	LOOKUP_HAND,
	TREE_DANCE_NYOKI,
	TREE_DANCE_TONTON,
	FRUIT_OTOSU,
	FRUIT_OTOSU_LOOP,
	FRUIT_OTOSU_FALL,
	FRUIT_OTOSU_END,
	KOKAGE_L_MOJI,
	KOKAGE_L_NOZOKU,
	KOKAGE_L_NOZOKU_LOOP,
	KOKAGE_L_END,
	SEED_UERU_START,
	SEED_UERU_HORU_LOOP,
	SEED_UERU_UERU,
	SEED_UERU_UMERU_START,
	SEED_UERU_UMERU_LOOP,
	SEED_UERU_END,
	JYOURO_START,
	JYOURO_LOOP,
	JYOURO_END,
	KYOROKYORO_UP, // Terrible, panicked
	KYOROKYORO_DOWN,
	OSYABURI_UP, // Pacifier
	OSYABURI_LOOP,
	KUSYAMI_SIT,
	KUSYAMI_STAND,
	SEKI_SIT_ALL,
	SEKI_SIT_KEHON,
	SEKI_STAND_ALL,
	SEKI_STAND_KEHON,
	SYAKKURI_SIT,
	SYAKKURI_STAND,
	NADE_GLAD,
	NADE_GLAD_HAND,
	NADE_KIMOCHII,
	NADE_TERE,
	NADE_IYA,
	NADE_IYA_LOOP,
	NADE_IYA_END,
	DAKKO,
	DAKKO_KIMO_LR,
	DAKKO_KIMO_FB,
	DAKKO_KIMO_JITABATA,
	DAKKO_GLAD,
	DAKKO_GLAD_LOOP,
	DAKKO_GLAD_CLAP,
	DAKKO_GLAD_CLAP_LOOP,
	DAKKO_IYA,
	DAKKO_IYA_LR,
	DAKKO_IYA_UD,
	DAKKO_IYA_HAND,
	DAKKO_IYA_L,
	DAKKO_IYA_R,
	THROWN,
	THROWN_FALL,
	THROWN_LAND,
	FUTTOBU,
	CRASH,
	PIYO,
	PIYO_LOOP,
	PIYO_END,
	URUSAI,
	KAOARAU,
	KAOARAU_LOOP,
	DRAMING,
	DRAMING_LOOP,
	DRAMING_WOO,
	FIRE,
	FIRE2,
	FIRE3,
	TOGU,
	UTAU_HIDARI,
	UTAU_HIDARI2,
	UTAU_MIGI,
	UTAU_MIGI2,
	UTAU_LEFT,
	UTAU_LEFT2,
	UTAU_RIGHT,
	UTAU_RIGHT2,
	BOXING1,
	BOXING2,
	SUMO_HAKKEYOI,
	SUMO_NOKOTTA,
	SUMO_DOSUKOI,
	ONARA,
	BAKUTEN,
	BAKUTEN_AIR,
	BAKUTEN_LAND,
	DENGURI,
	DENGURI_LOOP,
	DENGURI_END,
	PYONPYON,
	FUKKIN,
	FUKKIN_LOOP,
	TAISOU,
	TAISOU_YOKO,
	TAISOU_YOKO2KOKI,
	TAISOU_KOKI_R,
	TAISOU_KOKI_L,
	TAISOU_MAE,
	ON_YOUR_MARK,
	READY,
	GO,
	GOROGORO,
	GOROGORO_LOOP,
	RAKUGAKI_JYUNBI,
	RAKUGAKI_JYUNBI2,
	RAKUGAKI,
	SYABON_JYABU,
	SYABON_FUU,
	DOLL_YOSHIYOSHI,
	DOLL_TAKAITAKAI,
	GARAGARA,
	HANABI,
	HOPPING,
	HOPPING_LOOP,
	HOUKI,
	MINICAR,
	MINICAR_MIAGE,
	BOOK_START,
	BOOK_YOMU,
	BOOK_MEKURI,
	PIANO,
	ORGAN,
	HORSE_JUMP,
	HORSE_AIR,
	HORSE_START,
	HORSE_YURAYURA,
	HORSE_FINISH,
	MARACAS_JUMP_A,
	MARACAS_JUMP_B,
	MARACAS_SHAKA_UP,
	MARACAS_SHAKA_DOWN,
	BELL_UP,
	BELL_DOWN,
	DRUM_LR,
	DRUM_DOUBLE,
	FUE_LR,
	FUE_UD,
	CASTANETS_WAIT,
	CASTANETS_PON,
	CASTANETS_PONPON,
	RAPPA_FB,
	RAPPA_UP,
	RAPPA_DOWN,
	CYMBAL_WAIT,
	CYMBAL_PAN,
	CYMBAL_PANPAN,
	CYMBAL_PAPAPAN,
	TAMBOURINE_PAN,
	TAMBOURINE_SHAKA,
	HAND_DANCE_UP,
	HAND_DANCE_UP2,
	HAND_DANCE_DOWN,
	HAND_DANCE_DOWN2,
	HAND_DANCE_RIGHT,
	HAND_DANCE_RIGHT2,
	HAND_DANCE_LEFT,
	HAND_DANCE_LEFT2,
	ROUND_DANCE_LEFT,
	ROUND_DANCE_LEFT2,
	ROUND_DANCE_RIHGT,
	ROUND_DANCE_RIGHT2,
	ROUND_DANCE_LEFT_TURN,
	ROUND_DANCE_RIHGT_TURN,
	MUSIC_STAND,
	MUSIC_STAND_LOOP,
	MUSIC_SIT,
	MUSIC_SIT_LOOP,
	BOX_DANCE,
	GOGO_DANCE,
	GOGO_DANCE2,
	GOGO_DANCE3,
	HIP_DANCE,
	OTETE_L_WALK,
	OTETE_L_NE,
	OTETE_R_WALK,
	OTETE_R_NE,
	OJIGI,
	HELLO,
	GIVEME_P,
	GIVEME_P_NE,
	SURISURI,
	AGERU,
	AKUSYU,
	AKUSYU_LOOP,
	HISOHISO_L_LOOP,
	HISOHISO_L_CHIRA,
	MOGOMOGO_L_LOOP,
	MOGOMOGO_L_CHIRA,
	HISOHISO_R_LOOP,
	HISOHISO_R_CHIRA,
	MOGOMOGO_R_LOOP,
	MOGOMOGO_R_CHIRA,
	HOUYOU,
	HOUYOU_LOOP,
	NADERU,
	NEE_L,
	NEE_R,
	NEE_P_L,
	NEE_P_R,
	NOZOKU_L,
	NOZOKU_L_LOOP,
	NOZOKU_R,
	NOZOKU_R_LOOP,
	HI,
	WATAWATA_TALK,
	SIT_TALK,
	SIT_TALK_WAHAHA,
	SIT_TALK_WATAWATA,
	SIT_TALK_DARO,
	SIT_TALK_YADA,
	SIT_TALK_KUSUKUSU,
	SIT_TALK_OITOITE,
	STAND_TALK,
	STAND_TALK_WAHAHA,
	STAND_TALK_WATAWATA,
	STAND_TALK_DARO,
	STAND_TALK_YADA,
	STAND_TALK_KUSUKUSU,
	STAND_TALK_OITOITE,
	UNAZUKU,
	UNAZUKU2,
	PUNCH,
	PUNCH_YARARE,
	GENKOTU,
	GENKOTU_YARARE,
	KICK,
	KICK_YARARE,
	AKANBE,
	AKANBE2,
	ODOROKASU,
	PUI,
	POKAPOKA,
	IGAMI,
	IGAMI_LOOP,
	PANPAN,
	PANPAN_LOOP,
	PANPAN_END,
	SENOBI,
	SENOBI_END,
	LAUGH_SIT,
	LAUGH_SIT_LOOP,
	LAUGH_STAND,
	LAUGH_STAND_LOOP,
	GLAD_STAND,
	GLAD_STAND_LOOP,
	BAKUSYOU_ALL,
	BAKUSYOU,
	BAKUSYOU_KORAE,
	HASYAGU_JUMP,
	HASYAGU_PATA,
	HASYAGU_LAND,
	KUSUKUSU_SIT,
	KUSUKUSU_SIT_LOOP,
	KUSUKUSU_STAND_A,
	KUSUKUSU_STAND_A_LOOP,
	KUSUKUSU_STAND_B,
	DADA,
	MOJIMOJI,
	MOJIMOJI_LOOKUP,
	MOJIMOJI_LOOKUP_END,
	JIDANDA,
	ATAFUTA,
	ATAFUTA_LOOP,
	IYAIYA_A,
	IYAIYA_B,
	BUTUBUTU_FUGA,
	BUTUBUTU_ASHIBUMI,
	GAKKARI,
	FURAFURA,
	FURAFURA_LOOP,
	GUTTARI_STAND,
	GUTTARI_STAND_LOOP,
	BANZAI_JUMP,
	IJIKE_SIT,
	IJIKE_SIT_LOOP,
	IJIKE_SIT_HEAD,
	IJIKE_SIT_HEAD_LOOP,
	BURUBURU,
	BURUBURU_AGO,
	BURUBURU_AGO2KUCHI,
	BURUBURU_KUCHI2AGO,
	BURUBURU_KUCHI,
	TAMEIKI_STAND,
	TAMEIKI_STAND_LOOP,
	TAMEIKI_STAND_END,
	TAMEIKI_SIT,
	TAMEIKI_SIT_LOOP,
	TAMEIKI_SIT_END,
	NO,
	NO_END,
	EHHEN_STAND,	// Ehem
	EHHEN_STAND_END,
	EHHEN_WALK,
	IRANAI,
	IRANAI_END,
	ANGRY_STAND,
	ANGRY_STAND_LOOP,
	ANGRY_STAND_END,
	BIKU,
	JUMP_BIKU,
	ATOZUSARI,
	ATOZUSARI_LOOP,
	ATOZUSARI_BURUBURU,
	CRY_STAND_START,
	CRY_STAND_HIKKUHIKKU,
	CRY_STAND_HIKKU2SHIKU,
	CRY_STAND_SHIKUSHIKU,
	CRY_STAND_MESOMESO,
	CRY_SIT_START,
	CRY_SIT_HIKKUHIKKU,
	CRY_SIT_HEAD,
	CRY_SIT_SHIKUSHIKU,
	CRY_SIT_MESOMESO,
	CRY_SIT_JITABATA,
	CRY_WALK_A,
	CRY_WALK_A2B,
	CRY_WALK_B,
	CRY_WALK_B2A,
	NAKU_START,
	NAKU_UD,
	NAKU_LR,
	NAKU_LOOKUP,
	NAKU_LOOKUP_END,
	NAKU_END,
	MESO_STAND_START,
	MESO_STAND_HIKKU,
	MESO_STAND_MEKOSURI,
	MESO_STAND_MEKOSURI_HIKKU,
	MESO_STAND_HIKKU_TATE,
	MESO_SIT_START,
	MESO_SIT_HIKKU,
	MESO_SIT_MEKOSURI,
	MESO_SIT_MEKOSURI_HIKKU,
	MESO_SIT_HIKKU_TATE,
	TERE_MOJIMOJI,
	TERE_MOJIMOJI_LOOP,
	TERE_MOJI2PORI,
	TERE_PORIPORI_LOOP,
	TERE_PORI2EHE,
	TERE_EHE,
	ITAI_PIYO,
	ITAI_PITO2HEAD,
	ITAI_BURUBURU,
	ITAI_ATAMAPONPON,
	ITAI_KOSHIPONPON,
	KUSAI,
	KUSAI_BURUBURU,
	KUSAI_BURUBURU_END,
	KUSAI_BATAN,
	KUSAI_KYUU,
	IRAIRA_HAND,
	IRAIRA_FOOT,
	IRAIRA_B,
	HAKUSYU_SIT,
	HAKUSYU_STAND,
	TAIL,
	K_FIGHTING_TAIKI,
	K_TAIKI,
	K_ARUKI,
	K_KICK,
	K_MAWASHIGERI,
	K_POKAPOKA,
	K_PUNCH,
	K_GURUGURU_PUNCH,
	K_PIYO,
	K_YARARE_BACK_S,
	K_YARARE_BACK_M,
	K_YARARE_BACK_L,
	K_YOKERU,
	K_GLAD_TATI,
	K_JUMP_BANZAI,
	K_CRY_SUWARI,
	K_MESO_SUWARI,
	K_TATSU,
	K_SUWARU,
	K_SUWARU_SLEEP,
	K_SUWARU_AKUBI,
	K_SUWARU_TAIKI,
	K_SUWARU_YARARE_S,
	K_SUWARU_YARARE_M,
	K_SUWARU_YARARE_L,
	K_YOKERU_L,
	K_YOKERU_R,
	K_M_OKIAGARI,
	K_L_OKIAGARI,
	K_HAIHAI,
	K_HAIHAI_TAIKI,
	K_HAIHAI_YOKERU,
	K_HAITATI,
	K_HAISUWARI,
	K_MASKMAN,
	K_MASKMAN_WAIT,
	K_YUSHO,
	K_YUSHO_HAI,
	K_GOGODANCE,
	K_BREAKDANCE,
	K_NAORI,
	K_SEXYBEAM,
	K_SEXYBEAM_WAIT,
	K_MESO_TATI,
	K_HAIHAI_GLAD,
	K_MANPUKU,
	NUM_AL_MOTION
};

// Flags for sp_info
enum SP_FLAG
{
	SP_FLAG_BLEND_ONE = 0x1,
	SP_FLAG_BLEND_SRC = 0x2,
	SP_FLAG_USE_ALPHA = 0x8,   /* Set alpha pipeline */
	SP_FLAG_10 = 0x10,
	SP_FLAG_20 = 0x20,
	SP_FLAG_40 = 0x40,
	SP_FLAG_COLOR_FILTER = 0x80,  /* Multiply sprite color with white color (useless) */
	SP_FLAG_USE_OFFSET = 0x100, /* Wheter or not to use the offset value of a particule */
	SP_FLAG_400 = 0x400
};

// Flags for sp_task
enum SP_TASK_FLAG
{
	SP_TASK_EXIT = 0x1 /* Destroy task next frame */
};

// Flags for EnemyData
enum E_FLAG : Sint16
{
	E_FLAG_MINIMAL = 0x8,       /* If the enemy should load a minimal when dying */
	E_FLAG_DRIVE = 0x10,        /* If the enemy should load a chaos drive when dying */
	E_FLAG_SWITCH = 0x20,       /* If the enemy is bound to an emerald or a switch */
	E_FLAG_FLOOR = 0x40,        /* If the enemy is on the floor */
	E_FLAG_HITWALL = 0x100,     /* If the enemy hit a wall */
	E_FLAG_NOWATER = 0x2000,    /* If the collision system should ignore water */
	E_FLAG_UNDERWATER = 0x4000  /* If the enemy is underwater */
};

// Character Model Names
enum MODEL_NAMES
{
	SONIC_ROOT = 0,
	SONIC_ROOT2 = 1,
	SONIC_ROOT3 = 2,
	SONIC_HEAD = 3,
	SONIC_RIGHTEYE = 4,
	SONIC_LEFTEYE = 5,
	SONIC_JUMPBALL = 6,
	SONIC_HEADMOD = 7, // Head modifier volume. DC Only.
	SONIC_RIGHTTOE = 9,
	SONIC_LEFTTOE = 10,
	SONIC_RIGHTHEEL = 11,
	SONIC_LEFTHEEL = 12,
	SONIC_LEFTLIGHTSHOE = 13,
	SONIC_RIGHTLIGHTSHOE = 14,
	SONIC_RIGHTHAND = 15,
	SONIC_LEFTHAND = 16,
	SONIC_RIGHTARM = 17,
	SONIC_LEFTARM = 18,
	SONIC_JUMPEFFECT = 19,
	SONIC_HOMINGTRAIL = 20,
	SONIC_HEAD_1 = 21,
	SONIC_MOUTH = 22,
	SONIC_RIGHTHAND_1 = 23,
	SONIC_LEFTHAND_2 = 24,
	SONIC_FLAMERING = 25,
	SONIC_BOUNCEBRACELET = 26,
	SONIC_MAGICGLOVES = 27,
	SONIC_CHAOSCONTROL = 28,
	SONIC_SONICWIND = 29,
	SONIC_LIGHTSPEED = 30,
	SONIC_LOD_ROOT = 31,
	SONIC_LOD_ROOT2 = 32,
	SONIC_LOD_ROOT3 = 33,
	SONIC_LOD_HEAD = 34,
	SONIC_LOD_RIGHTEYE = 35,
	SONIC_LOD_LEFTEYE = 36,
	SONIC_LOD_HEAD_1 = 37,
	SONIC_LOD_RIGHTTOE = 38,
	SONIC_LOD_LEFTTOE = 39,
	SONIC_LOD_RIGHTHEEL = 40,
	SONIC_LOD_LEFTHEEL = 41,
	SONIC_LOD_RIGHTHAND = 42,
	SONIC_LOD_LEFTHAND = 43,
	SONIC_LOD_RIGHTARM = 44,
	SONIC_LOD_LEFTARM = 45,
	SONIC_LOD_RIGHTHAND_1 = 46,
	SONIC_LOD_LEFTHAND_1 = 47,
	SONIC_LOD2_ROOT = 48,
	SONIC_LOD2_ROOT2 = 49,
	SONIC_LOD2_ROOT3 = 50,
	SONIC_LOD2_HEAD = 51,
	SONIC_LOD2_RIGHTEYE = 52,
	SONIC_LOD2_LEFTEYE = 53,
	SONIC_LOD2_HEAD_1 = 54,
	SONIC_LOD2_RIGHTTOE = 55,
	SONIC_LOD2_LEFTTOE = 56,
	SONIC_LOD2_RIGHTHEEL = 57,
	SONIC_LOD2_LEFTHEEL = 58,
	SONIC_LOD2_RIGHTHAND = 59,
	SONIC_LOD2_LEFTHAND = 60,
	SONIC_LOD2_RIGHTARM = 61,
	SONIC_LOD2_LEFTARM = 62,
	SONIC_LOD2_RIGHTHAND_1 = 63,
	SONIC_LOD2_LEFTHAND_1 = 64,
	SONIC_ALT_HEAD1 = 391,
	SONIC_ALT_HEAD2 = 392,
	SONIC_LOD2_ALT_HEAD = 393,
	SONIC_ALT_HEADSET = 394, // Used for the PSO headset. DC Only.

	SHADOW_ROOT = 65,
	SHADOW_ROOT2 = 66,
	SHADOW_ROOT3 = 67,
	SHADOW_HEAD1 = 68,
	SHADOW_RIGHTEYE = 69,
	SHADOW_LEFTEYE = 70,
	SHADOW_JUMPBALL = 71,
	SHADOW_HEADMOD = 72, // Head modifier volume. DC Only.
	SHADOW_HEAD2 = 73,
	SHADOW_RIGHTTOE = 74,
	SHADOW_LEFTTOE = 75,
	SHADOW_RIGHTHEEL = 76,
	SHADOW_LEFTHEEL = 77,
	SHADOW_RIGHTAIRSHOE = 78,
	SHADOW_LEFTAIRSHOE = 79,
	SHADOW_RIGHTHAND1 = 80,
	SHADOW_LEFTHAND1 = 81,
	SHADOW_RIGHTARM = 82,
	SHADOW_LEFTARM = 83,
	SHADOW_JUMPEFFECT = 84,
	SHADOW_HOMINGTRAIL = 85,
	SHADOW_HEAD = 86,
	SHADOW_MOUTH = 87,
	SHADOW_RIGHTHAND = 88,
	SHADOW_LEFTHAND = 89,
	SHADOW_RIGHTHEEL2 = 90,
	SHADOW_LEFTHEEL2 = 91,
	SHADOW_NARROW_LEFTTOE_SKATE = 92,
	SHADOW_WIDE_LEFTTOE_SKATE = 93,
	SHADOW_WIDE_LEFTHEEL_SKATE = 94,
	SHADOW_NARROW_LEFTHEEL_SKATE = 95,
	SHADOW_NARROW_RIGHTTOE_SKATE = 96,
	SHADOW_WIDE_RIGHTTOE_SKATE = 97,
	SHADOW_WIDE_RIGHTHEEL_SKATE = 98,
	SHADOW_NARROW_RIGHTHEEL_SKATE = 99,
	SHADOW_FLAMERING = 100,
	SHADOW_CHAOSSPEAR = 101,
	SHADOW_CHAOSCONTROL = 102,
	SHADOW_LIGHTSPEED = 103,
	SHADOW_LOD_ROOT1 = 104,
	SHADOW_LOD_ROOT2 = 105,
	SHADOW_LOD_ROOT3 = 106,
	SHADOW_LOD_HEAD1 = 107,
	SHADOW_LOD_RIGHTEYE = 108,
	SHADOW_LOD_LEFTEYE = 109,
	SHADOW_LOD_HEAD2 = 110,
	SHADOW_LOD_RIGHTTOE = 111,
	SHADOW_LOD_LEFTTOE = 112,
	SHADOW_LOD_RIGHTHEEL1 = 113,
	SHADOW_LOD_LEFTHEEL1 = 114,
	SHADOW_LOD_RIGHTHAND1 = 115,
	SHADOW_LOD_LEFTHAND1 = 116,
	SHADOW_LOD_RIGHTARM = 117,
	SHADOW_LOD_LEFTARM = 118,
	SHADOW_LOD_RIGHTHEEL2 = 119,
	SHADOW_LOD_LEFTHEEL2 = 120,
	SHADOW_LOD_RIGHTHAND2 = 121,
	SHADOW_LOD_LEFTHAND2 = 122,
	SHADOW_LOD2_ROOT1 = 123,
	SHADOW_LOD2_ROOT2 = 124,
	SHADOW_LOD2_ROOT3 = 125,
	SHADOW_LOD2_HEAD1 = 126,
	SHADOW_LOD2_RIGHTEYE = 127,
	SHADOW_LOD2_LEFTEYE = 128,
	SHADOW_LOD2_HEAD2 = 129,
	SHADOW_LOD2_RIGHTTOE = 130,
	SHADOW_LOD2_LEFTTOE = 131,
	SHADOW_LOD2_RIGHTHEEL1 = 132,
	SHADOW_LOD2_LEFTHEEL1 = 133,
	SHADOW_LOD2_RIGHTHAND1 = 134,
	SHADOW_LOD2_LEFTHAND1 = 135,
	SHADOW_LOD2_RIGHTARM = 136,
	SHADOW_LOD2_LEFTARM = 137,
	SHADOW_LOD2_RIGHTHEEL2 = 138,
	SHADOW_LOD2_LEFTHEEL2 = 139,
	SHADOW_LOD2_RIGHTHAND2 = 140,
	SHADOW_LOD2_LEFTHAND2 = 141,

	KNUCKLES_ROOT = 142,
	KNUCKLES_ROOT2 = 143,
	KNUCKLES_ROOT3 = 144,
	KNUCKLES_RIGHTEYE = 146,
	KNUCKLES_LEFTEYE = 147,
	KNUCKLES_HEADMOD = 148, // Head modifier volume. DC Only.
	KNUCKLES_RIGHTARM = 154,
	KNUCKLES_LEFTARM = 155,
	KNUCKLES_HEAD = 156,
	KNUCKLES_MOUTH = 157,
	KNUCKLES_RIGHTHAND = 158,
	KNUCKLES_LEFTHAND = 159,
	KNUCKLES_SUNGLASSES = 161,
	KNUCKLES_RIGHTSHOVEL = 162,
	KNUCKLES_LEFTSHOVEL = 163,
	KNUCKLES_RIGHTHAMMER = 164,
	KNUCKLES_LEFTHAMMER = 165,
	KNUCKLES_HEADGLIDE = 166,
	KNUCKLES_TORSO = 167,
	KNUCKLES_AIRNECKLACE = 168,
	KNUCKLES_LOD = 169,
	KNUCKLES_DRILLCLAW = 170,

	ROUGE_ROOT = 171,
	ROUGE_ROOT2 = 172,
	ROUGE_ROOT3 = 173,
	ROUGE_TORSO = 174,
	ROUGE_RIGHTEYE = 176,
	ROUGE_LEFTEYE = 177,
	ROUGE_HEADMOD = 178, // Head modifier volume. DC Only.
	ROUGE_RIGHTARM = 184,
	ROUGE_LEFTARM = 185,
	ROUGE_HEAD = 186,
	ROUGE_MOUTH = 187,
	ROUGE_RIGHTHAND = 188,
	ROUGE_LEFTHAND = 189,
	ROUGE_WINGS = 190,
	ROUGE_TORSO2 = 191,
	ROUGE_RIGHTHEART = 192,
	ROUGE_RIGHTNAIL = 195,
	ROUGE_LEFTHEART = 196,
	ROUGE_LEFTNAIL = 199,
	ROUGE_RIGHTBOOT = 201,
	ROUGE_LEFTBOOT = 203,
	ROUGE_TREASURESCOPE = 205,
	ROUGE_LOD = 206,
	ROUGE_DRILLDIVE = 207,

	TAILS_ROOT = 208,
	TAILS_ROOT2 = 209,
	TAILS_ROOT3 = 210,
	TAILS_HEAD = 211,
	TAILS_RIGHTEYE = 212,
	TAILS_LEFTEYE = 213,
	TAILS_HEADMOD = 214, // Head modifier volume. DC Only.
	TAILS_HEAD2 = 215,
	TAILS_RIGHTTOE = 216,
	TAILS_LEFTTOE = 217,
	TAILS_RIGHTHAND1 = 218,
	TAILS_LEFTHAND1 = 219,
	TAILS_RIGHTARM = 220,
	TAILS_LEFTARM = 221,
	TAILS_WALKTAILS = 222,
	TAILS_TAILS = 223,
	TAILS_HEAD3 = 224,
	TAILS_MOUTH = 225,
	TAILS_RIGHTHAND = 226,
	TAILS_LEFTHAND = 227,
	TAILS_FLYTAILS = 228,
	TAILS_IDLETAILS = 229,
	TAILS_GCSHADOW = 528, // Shadow map model. GC/PC Only.
	TAILS_GCTAILSHADOW = 529, // Shadow map model. GC/PC Only.

	EGGMAN_ROOT = 230,
	EGGMAN_ROOT2 = 231,
	EGGMAN_ROO3 = 232,
	EGGMAN_HEAD = 233,
	EGGMAN_BODYMOD = 236, // Body modifier volume. DC Only.
	EGGMAN_HEAD2 = 237,
	EGGMAN_RIGHTTOE = 238,
	EGGMAN_LEFTTOE = 239,
	EGGMAN_RIGHTHAND = 240,
	EGGMAN_LEFTHAND = 241,
	EGGMAN_RIGHTARM = 242,
	EGGMAN_LEFTARM = 243,
	EGGMAN_HEAD3 = 244,
	EGGMAN_RIGHTHAND2 = 246,
	EGGMAN_LEFTHAND2 = 247,
	EGGMAN_GCSHADOW = 527, // Shadow map model. GC/PC Only.

	MECHEGGMAN_ROOT = 248,
	MECHEGGMAN_ROOT2 = 249,
	MECHEGGMAN_PILOT = 250,
	MECHEGGMAN_ROOT3 = 251,
	MECHEGGMAN_BODYMOD = 252, // Body modifier volume. DC Only.
	MECHEGGMAN_RIGHTFOOT = 253,
	MECHEGGMAN_LEFTFOOT = 254,
	MECHEGGMAN_FOOTMOD = 255, // Foot modifier volume. DC Only.
	MECHEGGMAN_MECHACCESSORY = 256,
	MECHEGGMAN_MISSILEBLASTERBARREL = 257,
	MECHEGGMAN_MISSILEBLASTER = 258,
	MECHEGGMAN_LASERBLASTERBARREL = 259,
	MECHEGGMAN_LASERBLASTER = 260,
	MECHEGGMAN_MECHACCESSORY2 = 261,
	MECHEGGMAN_LARGECANNONBARREL = 262,
	MECHEGGMAN_LARGECANNON = 263,
	MECHEGGMAN_MECHACCESSORY3 = 264,
	MECHEGGMAN_VULKANCANNONBARREL = 265,
	MECHEGGMAN_VULKANCANNON = 266,
	MECHEGGMAN_VULKANSHOT = 267,
	MECHEGGMAN_BOXINGGLOVE = 268,
	MECHEGGMAN_BOXINGGLOVE2 = 269,
	MECHEGGMAN_ROOT_1 = 270,
	MECHEGGMAN_MECHACCESSORY4 = 271,
	MECHEGGMAN_LARGECANNONSHOT = 272,
	MECHEGGMAN_RIGHTCALF = 273,
	MECHEGGMAN_RIGHTJETENGINE = 274,
	MECHEGGMAN_LEFTCALF = 275,
	MECHEGGMAN_LEFTJETENGINE = 276,
	MECHEGGMAN_ARMOR = 278,
	MECHEGGMAN_LARGECANNONEXHAUST1 = 279,
	MECHEGGMAN_LARGECANNONEXHAUST2 = 280,
	MECHEGGMAN_LARGECANNONEXHAUST3 = 281,
	MECHEGGMAN_LARGECANNONEXHAUST4 = 282,
	MECHEGGMAN_JETENGINETHRUST = 283,
	MECHEGGMAN_COCKPITMONITOR = 284,
	MECHEGGMAN_HEADLIGHT = 285,
	MECHEGGMAN_BRAKELIGHTS = 286,
	MECHEGGMAN_POWERLASERCANNON = 287,
	MECHEGGMAN_POWERLASERTOP = 288,
	MECHEGGMAN_POWERLASERBOTTOM = 289,
	MECHEGGMAN_POWERLASERTOPTHRUST = 290,
	MECHEGGMAN_ROCKETLAUNCHER = 291,
	MECHEGGMAN_ROCKETS = 292,
	MECHEGGMAN_GCWINDOW = 462, // Windshield model. GC/PC Only.
	MECHEGGMAN_GCSHADOW = 463, // Shadow map model. GC/PC Only.

	MECHTAILS_ROOT = 293,
	MECHTAILS_ROOT2 = 294,
	MECHTAILS_PILOT = 295,
	MECHTAILS_ROOT3 = 296,
	MECHTAILS_BODYMOD = 297, // Body modifier volume. DC Only.
	MECHTAILS_RIGHTFOOT = 298,
	MECHTAILS_LEFTFOOT = 299,
	MECHTAILS_FOOTMOD1 = 300, // Foot modifier volume. DC Only.
	MECHTAILS_FOOTMOD2 = 301, // Foot modifier volume. DC Only.
	MECHTAILS_ROOT4 = 302,
	MECHTAILS_MISSILEBLASTERBARREL = 303,
	MECHTAILS_MISSILEBLASTER = 304,
	MECHTAILS_LASERBLASTERBARREL = 305,
	MECHTAILS_LASERBLASTER = 306,
	MECHTAILS_ROOT5 = 307,
	MECHTAILS_BAZOOKABARREL = 308,
	MECHTAILS_BAZOOKA = 309,
	MECHTAILS_ROOT6 = 310,
	MECHTAILS_VULKANCANNON1 = 311,
	MECHTAILS_VULKANCANNON = 312,
	MECHTAILS_PROPELLERPUNCH1 = 313,
	MECHTAILS_PROPELLERPUNCH = 314,
	MECHTAILS_ROOT7 = 315,
	MECHTAILS_MECHACCESSORY = 316,
	MECHTAILS_BOOSTERTHRUST = 317,
	MECHTAILS_RIGHTCALF = 318,
	MECHTAILS_RIGHTBOOSTER = 319,
	MECHTAILS_LEFTCALF = 320,
	MECHTAILS_LEFTBOOSTER = 321,
	MECHTAILS_POWERLASERTOP = 322,
	MECHTAILS_POWERLASERBOTTOM = 323,
	MECHTAILS_POWERLASERTOPTHRUST = 324,
	MECHTAILS_ROCKETLAUNCHER = 325,
	MECHTAILS_ROCKETS = 326,
	MECHTAILS_BAZOOKASHOT = 327,
	MECHTAILS_GCSHADOW = 464, // Shadow map model. GC/PC Only.

	SUPERSONIC_ROOT = 328,
	SUPERSONIC_ROOT2 = 329,
	SUPERSONIC_ROOT3 = 330,
	SUPERSONIC_HEAD = 331,
	SUPERSONIC_RIGHTEYE = 332,
	SUPERSONIC_LEFTEYE = 333,
	SUPERSONIC_HEADMOD = 335, // Head modifier volume. DC Only.
	SUPERSONIC_HEAD2 = 336,
	SUPERSONIC_RIGHTTOE = 337,
	SUPERSONIC_LEFTTOE = 338,
	SUPERSONIC_RIGHTHEEL = 339,
	SUPERSONIC_LEFTHEEL = 340,
	SUPERSONIC_RIGHTHAND1 = 343,
	SUPERSONIC_LEFTHAND1 = 344,
	SUPERSONIC_RIGHTARM = 345,
	SUPERSONIC_LEFTARM = 346,
	SUPERSONIC_HEAD3 = 349,
	SUPERSONIC_MOUTH = 350,
	SUPERSONIC_RIGHTHAND2 = 351,
	SUPERSONIC_LEFTHAND2 = 352,

	SUPERSHADOW_ROOT = 355,
	SUPERSHADOW_ROOT2 = 356,
	SUPERSHADOW_ROOT3 = 357,
	SUPERSHADOW_HEAD = 358,
	SUPERSHADOW_RIGHTEYE = 359,
	SUPERSHADOW_LEFTEYE = 360,
	SUPERSHADOW_HEADMOD = 362, // Head modifier volume. DC Only.
	SUPERSHADOW_HEAD2 = 363,
	SUPERSHADOW_RIGHTTOE = 364,
	SUPERSHADOW_LEFTTOE = 365,
	SUPERSHADOW_RIGHTHEEL = 366,
	SUPERSHADOW_LEFTHEEL = 367,
	SUPERSHADOW_RIGHTHAND = 370,
	SUPERSHADOW_LEFTHAND = 371,
	SUPERSHADOW_RIGHTARM = 372,
	SUPERSHADOW_LEFTARM = 373,
	SUPERSHADOW_HEAD3 = 376,
	SUPERSHADOW_MOUTH = 377,
	SUPERSHADOW_RIGHTHAND2 = 378,
	SUPERSHADOW_LEFTHAND2 = 379,
	SUPERSHADOW_RIGHTFOOT = 380,
	SUPERSHADOW_LEFTFOOT = 381,
	SUPERSHADOW_NARROW_LEFTTOE_SKATE = 382,
	SUPERSHADOW_WIDE_LEFTTOE_SKATE = 383,
	SUPERSHADOW_WIDE_LEFTHEEL_SKATE = 384,
	SUPERSHADOW_NARROW_LEFTHEEL_SKATE = 385,
	SUPERSHADOW_NARROW_RIGHTTOE_SKATE = 386,
	SUPERSHADOW_WIDE_RIGHTTOE_SKATE = 387,
	SUPERSHADOW_WIDE_RIGHTHEEL_SKATE = 388,
	SUPERSHADOW_NARROW_RIGHTHEEL_SKATE = 389,

	AMY_HEAD1 = 391,
	AMY_HEAD2 = 393,
	AMY_ROOT = 395,
	AMY_ROOT2 = 396,
	AMY_ROOT3 = 397,
	AMY_HEAD3 = 398,
	AMY_RIGHTEYE = 399,
	AMY_LEFTEYE = 400,
	AMY_JUPMBALL = 401,
	AMY_HEAD4 = 403,
	AMY_RIGHTTOE = 404,
	AMY_LEFTTOE = 405,
	AMY_RIGHTHEEL = 406,
	AMY_LEFTHEEL = 407,
	AMY_RIGHTHAND = 410,
	AMY_LEFTHAND = 411,
	AMY_RIGHTARM = 412,
	AMY_LEFTARM = 413,
	AMY_HEAD5 = 414,
	AMY_MOUTH = 415,
	AMY_RIGHTHAND2 = 416,
	AMY_LEFTHAND2 = 417,
	AMY_STORMINGHEART = 504,
	AMY_FLASHHEART = 505,
	AMY_HAMMER = 506,

	METAL_ROOT = 418,
	METAL_ROOT2 = 419,
	METAL_ROOT3 = 420,
	METAL_HEAD1 = 421,
	METAL_RIGHTEYE = 422,
	METAL_LEFTEYE = 423,
	METAL_HEAD2 = 425,
	METAL_RIGHTTOE = 426,
	METAL_LEFTTOE = 427,
	METAL_RIGHTHEEL = 428,
	METAL_LEFTHEEL = 429,
	METAL_RIGHTHAND1 = 432,
	METAL_LEFTHAND1 = 433,
	METAL_RIGHTARM = 434,
	METAL_LEFTARM = 435,
	METAL_JUMPEFFECT = 436,
	METAL_HOMINGTRAIL = 437,
	METAL_HEAD3 = 438,
	METAL_MOUTH = 439,
	METAL_RIGHTHAND2 = 440,
	METAL_LEFTHAND2 = 441,
	METAL_BLACKSHIELDGLOW = 530, // Metal Sonic's glow. GC/PC Only.
	METAL_BLACKSHIELD = 531, // Metal Sonic's Black Shield. GC/PC Only.

	CHAOWALKER_ROOT = 442,
	CHAOWALKER_ROOT2 = 443,
	CHAOWALKER_ROOT3 = 444,
	CHAOWALKER_RIGHTTOE = 445,
	CHAOWALKER_LEFTTOE = 446,
	CHAOWALKER_FLOATINGBALL = 447,
	CHAOWALKER_RIGHTEYE = 448,
	CHAOWALKER_LEFTEYE = 449,
	CHAOWALKER_ROOT4 = 450,
	CHAOWALKER_OMOCHAO1 = 451,
	CHAOWALKER_OMOCHAO = 452,
	CHAOWALKER_RIGHTFOOT = 453,
	CHAOWALKER_LEFTFOOT = 454,
	CHAOWALKER_POWERLASERTOP = 455,
	CHAOWALKER_POWERLASERBOTTOM = 456,
	CHAOWALKER_POWERLASERTOPTHRUST = 457,
	CHAOWALKER_ROCKETLAUNCHER = 458,
	CHAOWALKER_ROCKETS = 459,
	CHAOWALKER_WINDOW = 460,

	DARKCHAOWALKER_ROOT = 465,
	DARKCHAOWALKER_ROOT2 = 466,
	DARKCHAOWALKER_ROOT3 = 467,
	DARKCHAOWALKER_RIGHTTOE = 468,
	DARKCHAOWALKER_LEFTTOE = 469,
	DARKCHAOWALKER_FLOATINGBALL = 470,
	DARKCHAOWALKER_RIGHTEYE = 471,
	DARKCHAOWALKER_LEFTEYE = 472,
	DARKCHAOWALKER_ROOT4 = 473,
	DARKCHAOWALKER_DARKOMOCHAO1 = 474,
	DARKCHAOWALKER_DARKOMOCHAO = 475,
	DARKCHAOWALKER_RIGHTFOOT = 476,
	DARKCHAOWALKER_LEFTFOOT = 477,
	DARKCHAOWALKER_POWERLASERTOP = 478,
	DARKCHAOWALKER_POWERLASERBOTTOM = 479,
	DARKCHAOWALKER_POWERLASERTOPTHRUST = 480,
	DARKCHAOWALKER_ROCKETLAUNCHER = 481,
	DARKCHAOWALKER_ROCKETS = 482,

	TIKAL_ROOT = 483,
	TIKAL_ROOT2 = 484,
	TIKAL_ROOT3 = 485,
	TIKAL_HEAD1 = 486,
	TIKAL_RIGHTEYE = 487,
	TIKAL_LEFTEYE = 488,
	TIKAL_HEAD2 = 489,
	TIKAL_RIGHTTOE = 490,
	TIKAL_LEFTTOE = 491,
	TIKAL_RIGHTHAND = 492,
	TIKAL_LEFTHAND = 493,
	TIKAL_RIGHTARM = 494,
	TIKAL_LEFTARM = 495,
	TIKAL_HEAD3 = 496,
	TIKAL_MOUTH = 497,
	TIKAL_RIGHTHAND2 = 498,
	TIKAL_LEFTHAND2 = 499,
	TIKAL_HEAD4 = 500,
	TIKAL_HEADGLIDE = 501,
	TIKAL_TORSO = 502,
	TIKAL_ROOT4 = 503,

	CHAOS_ROOT = 507,
	CHAOS_ROOT2 = 508,
	CHAOS_ROOT3 = 509,
	CHAOS_TORSO = 510,
	CHAOS_HEAD1 = 511,
	CHAOS_RIGHTEYE = 512,
	CHAOS_LEFTEYE = 513,
	CHAOS_HEAD2 = 514,
	CHAOS_RIGHTTOE = 515,
	CHAOS_LEFTTOE = 516,
	CHAOS_RIGHTHAND1 = 517,
	CHAOS_LEFTHAND1 = 518,
	CHAOS_RIGHTARM = 519,
	CHAOS_LEFTARM = 520,
	CHAOS_BRAIN = 522,
	CHAOS_RIGHTHAND2 = 523,
	CHAOS_LEFTHAND2 = 524,
	CHAOS_BODYGLOW = 525,
	CHAOS_PUDDLE = 526

};

/* Event IDs
Holds all the IDs for the events.
Prefixes:
* E_ | In-game event.
* ME_ | Mini-event.
* FMV_ | Video file event.
*/
enum EVENT_IDS {

	E_HERO_INTRO = 0, // Sonic escapes GUN. (E0000)
	ME_HERO_BIGFOOT = 1, // Big Foot is deployed. (ME0001)
	E_HERO_SHADOW = 2, // Sonic encounters Shadow. (Sonic's POV) (E0002)
	E_HERO_KNUCKLES = 3, // Knuckles introduction. (E0003)
	E_HERO_TAILS = 4, // Tails introduction. (E0004)
	E_HERO_PRISONLANE = 5, // Cutscene before Prison Lane (E0005)
	E_HERO_BREAKOUT = 6, // Amy frees Sonic. (E0006)
	ME_HERO_FAKER = 7, // Sonic encounters Shadow... again. (ME0007)
	ME_HERO_GREENFOREST = 8, // Green Forest mini-event. (ME0008)
	ME_HERO_PUMPKINHILL = 10, // Pumpkin Hill mini-event (ME0010)
	E_HERO_MOON = 11, // Day X aftermath. (E0011)
	ME_HERO_AQUATICMINE = 13, // Aquatic Mine mini-event. (ME0013)
	E_HERO_CHASE = 14, // Tails chases after the President. (E0014)
	E_HERO_PRESIDENT = 15, // Sonic intercepts the President. (E0015)
	E_HERO_HIDDENBASE = 16, // Team Sonic discovers Hidden Base. (E0016)
	E_HERO_DEATHCHAMBER = 17, // Sonic makes Knuckles look for the keys to the ruins. (E0017)
	ME_HERO_GHOST = 18, // King Boom Boo mini-event (ME0018)
	E_HERO_GOLEM = 19, // Eggman unleashes the Egg Golem. (E0019)
	E_HERO_FAKEEMERALD = 21, // Tails reveals the fake Emerald. (E0021)
	E_HERO_AMYDANGER = 22, // Eggman takes Amy hostage. (E0022)
	ME_HERO_HUNTERBATTLE = 23, // Knuckles vs. Rouge (ME0023)
	E_HERO_MASTERRESTORE = 24, // Knuckles saves Rouge and restores the Master Emerald. (E0024)
	E_HERO_EGGMANLAST = 25, // Eggman tricks Sonic and Tails. (E0025)
	E_HERO_FINALRUSH = 26, // Sonic uses Chaos Control. (E0026)
	E_HERO_SHADOWLAST = 27, // Sonic vs. Shadow aboard ARK. (E0027)
	E_HERO_ENDING = 28, // Sonic disarms ARK. (E0028)

	E_DARK_INTRO = 100, // Eggman breaks into Prison Island. (E0100)
	E_DARK_AWAKEN = 101, // Eggman releases and awakens Project Shadow to the world. (E0101)
	E_DARK_HOTSHOT = 102, // Shadow informs Eggman about ARK. (E0102)
	E_DARK_ROUGE = 103, // Rouge introduction. (E0103)
	ME_DARK_SANDOCEAN = 104, // Sand Ocean mini-event. (ME0104)
	E_DARK_NEWS = 105, // Eggman watches the news and learns about Shadow's robbery. (E0105)
	E_DARK_PAIN = 106, // Shadow promises revenge for Maria. (E0106)
	E_DARK_SONIC = 107, // Sonic encounters Shadow. (Shadow's POV) (E0107)
	ME_DARK_EGGQUARTERS = 108, // Egg Quarters mini-event. (ME0108)
	E_DARK_TELEPORT = 109, // Rouge follows Dr. Eggman to ARK. (E0109)
	ME_DARK_LOSTCOLONY = 110, // Lost Colony mini-event. (ME0110)
	E_DARK_ECLIPSECANNON = 111, // Shadow shows off ARK's Eclipse Cannon. Team Dark forms. (E0111)
	E_DARK_PRISONISLAND = 112, // Eggman briefs Team Dark on the plan. (E0112)
	E_DARK_AMY = 113, // Amy mistakes Shadow for Sonic. Tails engages Eggman. (E0113)
	ME_DARK_SECURITYHALL = 114, // Security Hall mini-event. (E0114)
	ME_DARK_FLYINGDOG = 115, // Flying Dog mini-event. (E0115)
	E_DARK_WHITEJUNGLE = 116, // Shadow takes a detour to save Rouge. (E0116)
	ME_DARK_FAKER = 117, // Shadow encounters Sonic... again. (ME0117)
	E_DARK_BOMB = 118, // Shadow uses Chaos Control to save Rouge. (E0118)
	E_DARK_MARIA = 119, // Shadow's life with Maria aboard ARK. (E0119)
	E_DARK_NEWSPAPER = 120, // Eggman learns of the last Emerald's location. (E0120)
	ME_DARK_SKYRAIL = 121, // Sky Rail mini-event. (E0121)
	E_DARK_TORNADO = 122, // Shadow spots the Tornado III. (E0122)
	E_DARK_GOLEM = 123, // The Egg Golem turns against Eggman. (E0123)
	E_DARK_PROJECTSHADOW = 124, // Rouge does some research on Shadow. (E0124)
	ME_DARK_HUNTERBATTLE = 125, // Rouge vs. Knuckles (ME0125)
	E_DARK_MASTERRESTORE = 126, // Knuckles saves Rouge and restores the Master Emerald. (E0126)
	E_DARK_COSMICWALL = 127, // Eggman returns to ARK to stop Team Sonic. (E0127)
	E_DARK_HOSTAGE = 128, // Eggman takes Amy hostage and tricks Sonic and Tails. (E0128)
	E_DARK_FINALCHASE = 129, // Shadow confronts Rouge and takes off to stop Sonic. (E0129)
	E_DARK_SONICLAST = 130, // Shadow vs. Sonic aboard ARK. (E0130)
	E_DARK_ENDING = 131, // Eggman inserts the last Chaos Emerald. (E0131)

	E_LAST_INTRO = 200, // A plan 50 years in the making. (E0200)
	E_LAST_FALL = 201, // ARK falls. (E0201)
	E_LAST_DIARY = 203, // Gerald's last words and diary. (E0203)
	E_LAST_AMY = 204, // Amy helps Shadow remember his promise. (E0204)
	E_LAST_BIOLIZARD = 205, // The Biolizard is unleashed. (E0205)
	E_LAST_MASTEREMERALD = 206, // Knuckles neutralizes the Chaos Emeralds. The Biolizard fuses to ARK. (E0206)
	E_LAST_SUPER = 207, // Sonic and Shadow transform. (E0207)
	E_LAST_SACRIFICE = 208, // Shadow gives his life to save Earth. (E0208)
	E_LAST_ENDING = 210, // "Sayonara, Shadow the Hedgehog..." | SA2 Ending. (E0210)

	E_DC_INTRO = 350, // Orignal SA2 intro (E0350)
	E_BATTLE_INTRO_JP = 360, // Japanese Battle intro. (E0360)
	E_BATTLE_INTRO_ENG = 361, // English Battle intro. (E0361)

	FMV_DC_INTRO = 401, // Video file version of the original SA2 intro. (E0401_M)
	FMV_PRISONISLAND = 409, // Prison Island explosion. (E0409_M)
	FMV_DAYX = 411, // Day X. (E0411_M)
	FMV_HERO_BLASTOFF = 420, // Hero Story version of the shuttle scene. (E0420_M)
	FMV_HERO_ENDING = 428, // ARK's Eclipse Cannon failure. Part of the Hero Story ending. (E0428_M)
	FMV_DARK_PREVIEW = 429, // Dark Story trailer. (E0429_M)
	FMV_LAST_PREVIEW = 430, // Last Story trailer. (E0430_M)
	FMV_DARK_BLASTOFF = 524, // Dark Story version of the shuttle scene. (E0524_M)
	FMV_HERO_PREVIEW = 532, // Hero Story trailer. (E0532_M)
	FMV_LAST_GERALD = 602, // Gerald Robotnik's message to humanity. (E0602_M)
	FMV_LAST_ARK = 609, // ARK is returned to its original position. (E0609_M)

	E_NONE = -1	// Play no event.
};

/* Character Animation IDs
Holds all the documented animation IDs for the game.
Prefixes:
* COMMON_ | Shared animations.
* SP_ | Special animations.
* B_ | Animations added in SA2B.
*/
enum CHARACTER_ANIMATIONS
{
	// Common IDs

	COMMON_STAND = 0,
	COMMON_ALT_STAND = 1,
	COMMON_STAND_1 = 2,
	COMMON_STAND_2 = 3,
	COMMON_STAND_UPWARD = 4,
	COMMON_STAND_DOWNWARD = 5,
	COMMON_WALK = 6,
	COMMON_SPEEDWALK = 7,
	COMMON_JOG = 8,
	COMMON_RUN = 9,
	COMMON_SPRINT = 10,
	COMMON_SPINDASH = 11,
	COMMON_SPINDASH_1 = 12,
	COMMON_SPRING_BOUNCE = 13,
	COMMON_SPRING_BEGINFALL = 14,
	COMMON_SPRING_FALL = 15,
	COMMON_LAND_LOW = 16,
	COMMON_LAND_HIGH = 17,
	COMMON_BRAKE = 18,
	COMMON_PUSH_BEGIN = 19,
	COMMON_PUSH = 20,
	COMMON_DAMAGE = 21,
	COMMON_STAND_3 = 22,
	COMMON_BLOW = 23,
	COMMON_COLLISION = 24,
	COMMON_COLLISION_RECOVER = 25,
	COMMON_STAND_4 = 26,
	COMMON_TURNAROUND = 27,
	COMMON_BRAKE_UPWARD = 28,
	COMMON_BRAKE_DOWNARD = 29,
	COMMON_BALL_SPIN = 30,
	COMMON_OBJECT_GRAB = 31,
	COMMON_OBJECT_RUN = 32,
	COMMON_OBJECT_BRAKE = 33,
	COMMON_OBJECT_TURNAROUND = 34,
	COMMON_OBJECT_STAND = 35,
	COMMON_OBJECT_STAND_UPWARD = 36,
	COMMON_OBJECT_STAND_DOWNWARD = 37,
	COMMON_OBJECT_WALK = 38,
	COMMON_STAND_5 = 39,
	COMMON_PULL = 40,
	COMMON_TREE_SHAKE = 41,
	COMMON_OBJECT_SHAKE = 42,
	COMMON_TREE_GRAB = 43,
	COMMON_TREE_HOLD = 44,
	COMMON_OBJECT_SPRING_BOUNCE = 45,
	COMMON_OBJECT_SPRING_BEGINFALL = 46,
	COMMON_OBJECT_SPRING_FALL = 47,
	COMMON_OBJECT_LAND = 48,
	COMMON_OBJECT_THROW = 49,
	COMMON_OBJECT_THROW1 = 50,
	COMMON_OBJECT_THROW_MIDAIR = 51,
	COMMON_OBJECT_THROW_MIDAIR1 = 52,
	COMMON_OBJECT_PLACE = 53,
	COMMON_VICTORY = 54,
	COMMON_BOUND_GHOST = 55,
	COMMON_AIRBUBBLE = 56,
	COMMON_DROWN_BEGIN = 57,
	COMMON_DROWN = 58,
	COMMON_DEATH = 59,
	COMMON_LEDGE_BALANCE = 61,
	COMMON_LEDGE_GRAB = 62,
	COMMON_LEDGE_CLIMB = 63,
	COMMON_LEDGE_FLIP = 64,
	COMMON_JUMP = 65,
	COMMON_JUMP_SPIN = 66,
	COMMON_JUMP_BEGINFALL = 67,
	COMMON_JUMP_FALL = 68,
	COMMON_OBJECT_PICKUP_FAILBEGIN = 69,
	COMMON_OBJECT_PICKUP_FAIL = 70,
	COMMON_OBJECT_PICKUP_FAILEND = 71,
	COMMON_WHISTLE = 72,
	COMMON_CHAO_MACHINE = 73,
	COMMON_LAUNCHPANEL = 74,
	COMMON_PULLEY = 75,
	COMMON_ROCKET_GRAB = 76,
	COMMON_ROCKET_HANG = 77,
	COMMON_PET = 78,
	COMMON_KNOCKDOWN_BEGIN = 79,
	COMMON_KNOCKDOWN = 80,
	COMMON_KNOCKDOWN_RECOVER = 81,
	COMMON_MYSTICMELODY_FLUTE = 82,
	COMMON_MYSTICMELODY_SHRINE = 83,
	COMMON_MYSTICMELODY_SHRINE1 = 84,
	COMMON_FAILURE = 85,


	SPEED_LIGHTDASH = 87,


	// Sonic IDs

	SONIC_IDLE1 = 88,
	SONIC_IDLE2 = 89,
	SONIC_SOMERSAULT_BEGIN = 90,
	SONIC_SOMERSAULT_BEGIN1 = 91,
	SONIC_SOMERSAULT_UNCURL = 92,
	SONIC_SOMERSAULT_SLIDE = 93,
	SONIC_SOMERSAULT_CANCEL = 94,
	SONIC_SOMERSAULT_JUMPBACK = 95,
	SONIC_SOMERSAULT_BEGIN2 = 96,
	SONIC_SOMERSAULT_FLIP = 97,
	SONIC_SOMERSAULT_PUNCH_BEGIN = 98,
	SONIC_SOMERSAULT_PUNCH = 99,
	SONIC_HOMING_LUNGE = 100,
	SONIC_HOMING_TRICK1 = 101,
	SONIC_HOMING_TRICK2 = 102,
	SONIC_HOMING_TRICK3 = 103,
	SONIC_GRIND_RIGHT_STAND_LEFT = 104,
	SONIC_GRIND_RIGHT_STAND_RIGHT = 105,
	SONIC_GRIND_RIGHT_CROUCH_LEFT = 106,
	SONIC_GRIND_RIGHT_CROUCH_RIGHT = 107,
	SONIC_GRIND_LEFT_STAND_LEFT = 108,
	SONIC_GRIND_LEFT_STAND_RIGHT = 109,
	SONIC_GRIND_LEFT_CROUCH_LEFT = 110,
	SONIC_GRIND_LEFT_CROUCH_RIGHT = 111,
	SONIC_GRIND_BALANCE_LEFT = 112,
	SONIC_GRIND_BALANCE_RIGHT = 113,
	SONIC_GRIND_TRICK_AWESOME = 114,
	SONIC_GRIND_TRICK_COOL = 115,
	SONIC_GRIND_TRICK_NICE = 116,
	SONIC_RAMP_TRICK = 117,
	SONIC_ATTACK = 118,
	SONIC_INTRO_POSE = 119,
	SONIC_INTRO_IDLE = 120,
	SP_B_SONIC_BOARD_TRICK_NICE = 142,
	SP_B_SONIC_BOARD_TRICK_COOL = 143,
	SP_B_SONIC_BOARD_TRICK_AWESOME = 144,
	SP_B_BOARD_SONIC_TRICK_NICE = 157,
	SP_B_BOARD_SONIC_TRICK_COOL = 158,
	SP_B_BOARD_SONIC_TRICK_AWESOME = 159,

	// Shadow IDs

	SHADOW_RAMPTRICK = 246,
	SHADOW_STAND = 169,
	SHADOW_STAND_ALT = 170,
	SHADOW_SKATE1 = 172,
	SHADOW_STATE2 = 173,
	SHADOW_SKATE3 = 174,
	SHADOW_TURN = 175,
	SHADOW_IDLE1 = 176,
	SHADOW_IDLE2 = 177,
	SHADOW_SPIN = 178,
	SHADOW_LAND_HIGH = 179,
	SHADOW_VICTORY = 180,
	SHADOW_LOSING = 181,
	SHADOW_ATTACK = 182,
	SHADOW_INTRO_POSE = 183,
	SHADOW_INTRO_IDLE = 184,
	SP_B_SHADOW_BOARD_TRICK_NICE = 133,
	SP_B_SHADOW_BOARD_TRICK_COOL = 134,
	SP_B_SHADOW_BOARD_TRICK_AWESOME = 135,
	SP_B_BOARD_SHADOW_TRICK_NICE = 166,
	SP_B_BOARD_SHADOW_TRICK_COOL = 167,
	SP_B_BOARD_SHADOW_TRICK_AWESOME = 168,

	// Knuckles IDs

	KNUCKLES_IDLE1 = 87,
	KNUCKLES_IDLE2 = 88,
	KNUCKLES_CLIMB = 89,
	KNUCKLES_DIG_BEGIN = 90,
	KNUCKLES_DIG_ACTION = 91,
	KNUCKLES_DIG_JUMPOUT = 92,
	KNUCKLES_DIG_FALL_BEGIN = 93,
	KNUCKLES_DIG_FAIL = 94,
	KNUCKLES_DIG_WALL_BEGIN = 95,
	KNUCKLES_DIG_WALL = 96,
	KNUCKLES_DIG_WALL_EXIT_BEGIN = 97,
	KNUCKLES_DIG_WALL_EXIT = 98,
	KNUCKLES_DIG_WALL_FAIL = 99,
	KNUCKLES_CLIMB2 = 100,
	KNUCKLES_CLIMB_LEFT = 101,
	KNUCKLES_CLIMB_RIGHT = 102,
	KNUCKLES_WALL_HOLD = 103,
	KNUCKLES_LEDGE = 104,
	KNUCKLES_GLIDE = 105,
	KNUCKLES_WALL_GRAB = 106,
	KNUCKLES_GLIDE_CANCEL1 = 107,
	KNUCKLES_GLIDE_CANCEL2 = 108,
	KNUCKLES_PUNCH1 = 109,
	KNUCKLES_PUNCH2 = 110,
	KNUCKLES_UPPERCUT = 111,
	KNUCKLES_PUNCH1_RUN = 112,
	KNUCKLES_PUNCH2_RUN = 113,
	KNUCKLES_DRILLATTACK = 114,
	KNUCKLES_DRILLDIVE = 115,
	KNUCKLES_DRILLDIVE_LAND = 116,
	KNUCKLES_WATER_PADDLE = 117,
	KNUCKLES_WATER_DIVE_BEGIN = 118,
	KNUCKLES_WATER_DIVE = 119,
	KNUCKLES_WATER_SURFACE_BEGIN = 120,
	KNUCKLES_WATER_SURFACE = 121,
	KNUCKLES_WATER_FLOAT = 122,
	KNUCKLES_KNOCKDOWN = 123,
	KNUCKLES_KNOCKDOWN_RECOVER = 124,
	KNUCKLES_WALK = 125,
	KNUCKLES_SPRINT = 126,
	KNUCKLES_SPIRALUPPER = 127,
	KNUCKLES_STANDING = 128,
	KNUCKLES_VICTORY = 129,
	KNUCKLES_FAILURE = 130,
	KNUCKLES_LAND_LOW = 131,
	KNUCKLES_LAND_HIGH = 132,
	KNUCKLES_WHISTLE = 133,
	KNUCKLES_2PATTACK = 134,
	KNUCKLES_SUNGLASSES_EQUIP = 135,
	KNUCKLES_INTRO_POSE = 136,
	KNUCKLES_INTRO_IDLE = 137,
	KNUCKLES_HAMMERPUNCH = 138,
	KNUCKLES_OBJECT_WALK = 139,
	KNUCKLES_OBJECT_THROW_AIR = 140,


	// Rouge IDs

	ROUGE_IDLE1 = 141,
	ROUGE_IDLE2 = 142,
	ROUGE_IDLE3 = 143,
	ROUGE_KICK1 = 144,
	ROUGE_KICK2 = 145,
	ROUGE_KICK3 = 146,
	ROUGE_WALK = 150,
	ROUGE_SPEEDWALK = 151,
	ROUGE_JOG = 152,
	ROUGE_RUN = 153,
	ROUGE_SPRINT = 154,
	ROUGE_GLIDE = 155,
	ROUGE_WALL_GRAB = 156,
	ROUGE_GLIDE_CANCEL = 157,
	ROUGE_GLIDE_CANCEL1 = 158,
	ROUGE_CLIMB = 159,
	ROUGE_CLIMB_LEFT = 160,
	ROUGE_CLIMB_RIGHT = 161,
	ROUGE_WALL_HOLD = 162,
	ROUGE_DRILLDIVE_ANIMATION = 163,
	ROUGE_DIG_BEGIN = 164,
	ROUGE_DIG = 165,
	ROUGE_WALL_DIG_BEGIN = 166,
	ROUGE_WALL_DIG = 167,
	ROUGE_STAND = 168,
	ROUGE_OBJECT_GRAB = 169,
	ROUGE_OBJECT_GRAB1 = 170,
	ROUGE_OBJECT_HOLD = 171,
	ROUGE_UNKNOWN = 172,
	ROUGE_LAND_HIGH = 173,
	ROUGE_VICTORY = 174,
	ROUGE_FAILURE = 175,
	ROUGE_2PATTACK = 176,
	ROUGE_TREASURESCOPE_EQUIP = 177,
	ROUGE_HIPDROP = 178,
	ROUGE_INTRO_POSE = 179,
	ROUGE_INTRO_IDLE = 180,
	ROUGE_SCREWKICK = 181,
	ROUGE_WATER_PADDLE = 182,
	ROUGE_WATER_DIVE_BEGIN = 183,
	ROUGE_WATER_DIVE = 184,
	ROUGE_WATER_SURFACE_BEGIN = 185,
	ROUGE_WATER_SURFACE = 186,
	ROUGE_WATER_FLOAT = 187,
	ROUGE_WHISTLE = 188,
	ROUGE_DIG_JUMPOUT = 189,
	ROUGE_DIG_FALL_BEGIN = 190,
	ROUGE_DIG_FAIL = 191,
	ROUGE_DIG_WALL_EXIT_BEGIN = 192,
	ROUGE_DIG_WALL_EXIT = 193,
	ROUGE_DIG_WALL_FAIL = 194,
	ROUGE_LEDGE = 195,
	ROUGE_KNOCKDOWN = 196,
	ROUGE_KNOCKDOWN_RECOVER = 197,
	ROUGE_PULLEY = 198,
	ROUGE_OBJECT_WALK = 199,
	ROUGE_OBJECT_RUN = 200,
	ROUGE_OBJECT_SHAKE = 201,
	ROUGE_OBJECT_JUMP = 202,
	ROUGE_OBJECT_FALL_BEGIN = 203,
	ROUGE_OBJECT_FALL = 204,
	ROUGE_WINGS_GLIDE = 205,
	ROUGE_WINGS_STATIC = 206,
	ROUGE_WINGS_FALL = 207,
	ROUGE_WINGS_ANIM1 = 208,
	ROUGE_WINGS_ANIM2 = 209,
	ROUGE_WINGS_ANIM3 = 210,

	SP_HUNTER_TURTLE = 211,
	SP_HUNTER_TURTLE_HOLD = 212,
	SP_HUNTER_TURTLE_MOUNT = 215,
	SP_HUNTER_HIDE = 216,

	// Mech Eggman

	MECHEGGMAN_IDLE1 = 87,
	MECHEGGMAN_IDLE2 = 88,
	MECHEGGMAN_STAND = 89,
	MECHEGGMAN_STAND_1 = 90,
	MECHEGGMAN_WALK = 91,
	MECHEGGMAN_SPEEDWALK = 92,
	MECHEGGMAN_JOG = 93,
	MECHEGGMAN_JUMP = 94,
	MECHEGGMAN_JUMP_FALL = 95,
	MECHEGGMAN_STAND_2 = 96,
	MECHEGGMAN_LAND_LOW = 97,
	MECHEGGMAN_LAND_HIGH = 98,
	MECHEGGMAN_BRAKE = 99,
	MECHEGGMAN_DAMAGE = 100,
	MECHEGGMAN_STAND_3 = 101,
	MECHEGGMAN_BLOW = 102,
	MECHEGGMAN_STAND_4 = 103,
	MECHEGGMAN_STAND_5 = 104,
	MECHEGGMAN_TURN = 105,
	MECHEGGMAN_STAND_UPWARD = 106,
	MECHEGGMAN_STAND_DOWNWARD = 107,
	MECHEGGMAN_VICTORY = 108,
	MECHEGGMAN_STAND_6 = 109,
	MECHEGGMAN_STAND_7 = 110,
	MECHEGGMAN_STAND_8 = 111,
	MECHEGGMAN_STAND_9 = 112,
	MECHEGGMAN_DEATH = 113,
	MECHEGGMAN_BALANCE = 114,
	MECHEGGMAN_HOP = 115,
	MECHEGGMAN_HOP_FALL = 116,
	MECHEGGMAN_HOP_LAND = 117,
	MECHEGGMAN_STAND_10 = 118,
	MECHEGGMAN_WHISTLE = 119,
	MECHEGGMAN_PANEL_LAUNCH = 120,
	MECHEGGMAN_PANEL_FALL = 121,
	MECHEGGMAN_STAND_11 = 122,
	MECHEGGMAN_PULLEY = 123,
	MECHEGGMAN_MYSTICMELODY_LOOK = 124,
	MECHEGGMAN_MYSTICMELODY_LOOK_1 = 125,
	MECHEGGMAN_MYSTICMELODY_FLUTE = 126,
	MECHEGGMAN_HOVER = 127,
	MECHEGGMAN_GLOVE_ACTIVATE = 128,
	MECHEGGMAN_GLOVE_PUNCH = 129,
	MECHEGGMAN_POWERLASER_OPEN = 130,
	MECHEGGMAN_GLOVE_ACTIVATE_1 = 131,
	MECHEGGMAN_GLOVE_ACTIVATE_2 = 132,
	MECHEGGMAN_POWERLASER_FIRE = 133,
	MECHEGGMAN_FAILURE = 134,
	MECHEGGMAN_ATTACK = 135,
	MECHEGGMAN_INTRO_POSE = 136,
	MECHEGGMAN_INTRO_IDLE = 137,
	SP_MECHEGGMAN_QUICKSAND = 138,


	// Mech Tails Animations

	MECHTAILS_IDLE1 = 139,
	MECHTAILS_IDLE2 = 140,
	MECHTAILS_STAND = 141,
	MECHTAILS_STAND_1 = 142,
	MECHTAILS_WALK = 143,
	MECHTAILS_SPEEDWALK = 144,
	MECHTAILS_JOG = 145,
	MECHTAILS_JUMP = 146,
	MECHTAILS_JUMP_FALL = 147,
	MECHTAILS_STAND_2 = 148,
	MECHTAILS_LAND_LOW = 149,
	MECHTAILS_LAND_HIGH = 150,
	MECHTAILS_BRAKE = 151,
	MECHTAILS_DAMAGE = 152,
	MECHTAILS_STAND_3 = 155,
	MECHTAILS_STAND_4 = 156,
	MECHTAILS_TURN = 157,
	MECHTAILS_STAND_UPWARD = 158,
	MECHTAILS_STAND_DOWNWARD = 159,
	MECHTAILS_VICTORY = 160,
	MECHTAILS_STAND_5 = 161,
	MECHTAILS_STAND_6 = 162,
	MECHTAILS_STAND_7 = 163,
	MECHTAILS_STAND_8 = 164,
	MECHTAILS_DEATH = 165,
	MECHTAILS_LEDGE = 166,
	MECHTAILS_HOP = 167,
	MECHTAILS_HOP_FALL = 168,
	MECHTAILS_HOP_LAND = 169,
	MECHTAILS_STAND_9 = 170,
	MECHTAILS_WHISTLE = 171,
	MECHTAILS_PANEL_LAUNCH = 172,
	MECHTAILS_PANEL_FALL = 173,
	MECHTAILS_STAND_10 = 174,
	MECHTAILS_PULLEY = 175,
	MECHTAILS_MYSTICMELODY_SHRINE = 176,
	MECHTAILS_MYSTICMELODY_SHRINE_1 = 177,
	MECHTAILS_MYSTICMELODY_FLUTE = 178,
	MECHTAILS_HOVER = 179,
	MECHTAILS_PROPELLERPUNCH_ACTIVATE = 180,
	MECHTAILS_PROPERLLERPUNCH = 181,
	MECHTAILS_PROPELLERPUNCH_ACTIVATE_1 = 182,
	MECHTAILS_PROPELLERPUNCH_ACTIVATE_2 = 183,
	MECHTAILS_POWERLASER = 184,
	MECHTAILS_FAILURE = 186,
	MECHTAILS_ATTACK = 186,
	MECHTAILS_INTRO_POSE = 187,
	MECHTAILS_INTRO_IDLE = 188,
	SP_MECHTAILS_QUICKSAND = 189,


	// Mechless Tails Animations

	TAILS_IDLE1 = 87,
	TAILS_IDLE2 = 88,
	TAILS_STAND = 89,
	TAILS_FLY = 90,
	TAILS_FLY_DESCEND = 91,
	TAILS_FLY_DESCEND_1 = 92,
	TAILS_FLY_LAND = 93,
	TAILS_TAILSWIPE = 94,
	TAILS_STAND_1 = 95,
	TAILS_WALK = 95,
	TAILS_RUN = 97,
	TAILS_STAND_2 = 98,
	TAILS_OBJECT_GRAB = 99,
	TAILS_OBJECT_HOLD = 100,
	TAILS_UNK = 101,
	TAILS_UNK_1 = 102,
	TAILS_OBJECT_SHAKE = 103,
	TAILS_PET = 104,
	TAILS_JUMP = 105,
	TAILS_JUMP_FALL_BEGIN = 106,
	TAILS_FALL = 107,
	TAILS_FALL_1 = 108,
	TAILS_LEDGE = 109,
	TAILS_LEDGE_CLIMB = 110,
	TAILS_LEDGE_CLIMB_1 = 111,
	TAILS_UNK_2 = 112,
	TAILS_SPEEDWALK = 113,
	TAILS_JOG = 114,
	TAILS_LAND_LOW = 115,
	TAILS_OBJECT_WALK_B = 116,
	TAILS_OBJECT_WALK_B_1 = 117,


	// Mechless Eggman Animations

	EGGMAN_IDLE1 = 87,
	EGGMAN_IDLE2 = 88,
	EGGMAN_STAND = 89,
	EGGMAN_STAND_1 = 90,
	EGGMAN_WALK = 91,
	EGGMAN_SPEEDWALK = 92,
	EGGMAN_SPEEDWALK_1 = 93,
	EGGMAN_RUN = 94,
	EGGMAN_RUN_1 = 95,
	EGGMAN_STAND_2 = 96,
	EGGMAN_OBJECT_GRAB = 97,
	EGGMAN_OBJECT_HOLD = 98,
	EGGMAN_OBJECT_FAIL_BEGIN = 99,
	EGGMAN_OBJECT_FAIL = 100,
	EGGMAN_OBJECT_FAIL_END = 101,
	EGGMAN_OBJECT_SHAKE = 102,
	EGGMAN_PET = 103,
	EGGMAN_JUMP = 104,
	EGGMAN_JUMP_FALL_BEGIN = 106,
	EGGMAN_JUMP_FALL = 107,
	EGGMAN_STAND_3 = 108,
	EGGMAN_ALT_FALL_BEGIN = 109,
	EGGMAN_ALT_FALL = 110,
	EGGMAN_LAND_LOW = 111,
	EGGMAN_LAND_HIGH = 112,
	EGGMAN_BRAKE = 113,
	EGGMAN_PUSH_BEGIN = 114,
	EGGMAN_PUSH = 115,
	EGGMAN_DAMAGE = 114,
	EGGMAN_STAND_4 = 117,
	EGGMAN_STAND_5 = 118,
	EGGMAN_COLLISION = 119,
	EGGMAN_STAND_6 = 120,
	EGGMAN_TURN = 121,
	EGGMAN_STAND_7 = 122,
	EGGMAN_STAND_8 = 123,
	EGGMAN_OBJECT_RUN = 124,
	EGGMAN_OBJECT_BRAKE = 125,
	EGGMAN_OBJECT_TURN = 126,
	EGGMAN_OBJECT_DOWNWARD = 127,
	EGGMAN_OBJECT_UPWARD = 128,
	EGGMAN_OBJECT_WALK = 129,
	EGGMAN_PULL = 130,
	EGGMAN_TREE_SHAKE = 131,
	EGGMAN_TREE_GRAB = 132,
	EGGMAN_TREE_HOLD = 133,
	EGGMAN_OBJECT_SPRING = 134,
	EGGMAN_OBJECT_SPRING_FALL_BEGIN = 135,
	EGGMAN_OBJECT_FALL_BEGIN = 136,
	EGGMAN_OBJECT_FALL = 137,
	EGGMAN_OBJECT_THROW = 138,
	EGGMAN_OBJECT_TRHOW_1 = 139,
	EGGMAN_OBJECT_THROW_MIDAIR = 140,
	EGGMAN_OBJECT_THROW_MIDAIR_1 = 141,
	EGGMAN_OBJECT_PLACE = 142,
	EGGMAN_STAND_9 = 143,
	EGGMAN_STAND_10 = 144,
	EGGMAN_STAND_11 = 145,
	EGGMAN_STAND_12 = 146,
	EGGMAN_DEATH = 147,
	EGGMAN_STAND_13 = 148,
	EGGMAN_STAND_14 = 149,
	EGGMAN_LEDGE = 150,
	EGGMAN_LEDGE_CLIMB = 151,
	EGGMAN_LEDGE_CLIMB_1 = 152,
	EGGMAN_WHISTLE = 153,
	EGGMAN_CHAO_MACHINE = 154,
	EGGMAN_STAND_15 = 155,
	EGGMAN_STAND_16 = 156,
	EGGMAN_STAND_17 = 157,
	EGGMAN_STAND_18 = 158,
	EGGMAN_STAND_19 = 159,
	EGGMAN_STAND_20 = 160,
	EGGMAN_STAND_21 = 161,
	EGGMAN_SLAP = 162,
	EGGMAN_KICK = 163,


	// Shared Super Animations

	SUPER_FLOAT = 87,
	SUPER_FLY1 = 88,
	SUPER_FLY2 = 89,
	SUPER_ASCEND_BEGIN = 90,
	SUPER_ASCEND = 91,
	SUPER_DESCEND_BEGIN = 92,
	SUPER_DESCEND = 93,
	SUPER_DASH_FORWARD_BEGIN = 94,
	SUPER_DASH_FORWARD = 95,
	SUPER_DASH_DOWNWARD_BEGIN = 96,
	SUPER_DASH_DOWNWARD = 97,
	SUPER_HIT = 98,
	SUPER_HIT_RECOVER = 99,


	// Super Sonic


	SUPERSONIC_INTRO2 = 100,
	SUPERSONIC_VICTORY = 101,
	SUPERSONIC_VICTORY_SHADOW = 102,
	SUPERSONIC_DEATH = 103,
	SUPERSONIC_FLOATINPLACE = 104,
	SUPERSONIC_FLOATINPLACE_1 = 105,
	SUPERSONIC_INTRO2_CAM = 106,
	SUPERSONIC_INTRO1 = 107,
	SUPERSONIC_INTRO1_CAM = 108,
	SUPERSONIC_IDLE_FH = 109,


	// Super Shadow

	SUPERSHADOW_DEATH = 103,
	SUPERSHADOW_FLOATINPLACE = 104,
	SUPERSHADOW_FLOATINPLACE_1 = 105,
	SUPERSHADOW_INTRO2 = 110,
	SUPERSHADOW_INTRO2_CAM = 111,
	SUPERSHADOW_VICTORY = 112,
	SUPERSHADOW_VICTORY_SUPERSONIC = 113,
	SUPERSHADOW_INTRO1 = 114,
	SUPERSHADOW_INTRO1_CAM = 115,
	SUPERSHADOW_IDLE_FH = 116,


	// Amy Animations

	AMY_IDLE1 = 216,
	AMY_IDLE2 = 217,
	AMY_SPIN = 218,
	AMY_SOMERSAULT_BEGIN = 240,
	AMY_SOMERSAULT_BEGIN_1 = 241,
	AMY_SOMERSAULT_HAMMER_BEGIN = 242,
	AMY_SOMERSAULT_HAMMER = 245,
	AMY_GRIND_TRICK_NICE = 235,
	AMY_RAMP_TRICK = 248,
	AMY_ATTACK = 219,
	AMY_INTRO_POSE = 220,
	AMY_INTRO_IDLE = 221,
	AMY_STAND = 203,
	AMY_WALK = 204,
	AMY_SPEEDWALK = 205,
	AMY_JOG = 206,
	AMY_RUN = 207,
	AMY_SPRINT = 208,
	AMY_HOMING_TRICK1 = 209,
	AMY_HOMING_TRICK2 = 210,
	AMY_HOMING_TRICK3 = 211,
	AMY_VINE_GRAB = 212,
	AMY_VINE_HOLD = 213,
	AMY_VICTORY = 214,
	AMY_FAILURE = 215,
	AMY_JUMP = 228,
	AMY_HAMMER_REVEAL = 229,
	AMY_JUMP_DASH = 230,
	AMY_HAMMER_HIDE = 231,
	AMY_JUMP_DASH_FALL_BEGIN = 232,
	AMY_HAMMER_HIDE_1 = 233,
	AMY_FALL = 234,
	AMY_LAND_HIGH = 238,

	SP_B_AMY_BOARD_TRICK_NICE = 139,
	SP_B_AMY_BOARD_TRICK_COOL = 140,
	SP_B_AMY_BOARD_TRICK_AWESOME = 141,
	SP_B_AMY_SHADOW_TRICK_NICE = 163,
	SP_B_AMY_SHADOW_TRICK_COOL = 164,
	SP_B_AMY_SHADOW_TRICK_AWESOME = 165,


	// Metal Sonic Animations

	METAL_GRIND_TRICK_COOL = 236,
	METAL_RAMP_TRICK = 247,
	METAL_STAND_ALT = 170,
	METAL_SPEEDWALK = 222,
	METAL_JOG = 223,
	METAL_RUN = 224,
	METAL_SPRINT = 225,
	METAL_TURN = 175,
	METAL_IDLE1 = 176,
	METAL_IDLE2 = 177,
	METAL_SPIN = 178,
	METAL_LAND_HIGH = 179,
	METAL_VICTORY = 237,
	METAL_FAILURE = 239,
	METAL_ATTACK = 182,
	METAL_INTRO_POSE = 226,
	METAL_INTRO_IDLE = 227,
	METAL_BLACKSHIELD_ENGAGE = 243,
	METAL_BLACKSHIELD_ANIM = 244,

	SP_B_METAL_BOARD_TRICK_NICE = 136,
	SP_B_METAL_BOARD_TRICK_COOL = 137,
	SP_B_METAL_BOARD_TRICK_AWESOME = 138,
	SP_B_METAL_SHADOW_TRICK_NICE = 160,
	SP_B_METAL_SHADOW_TRICK_COOL = 161,
	SP_B_METAL_SHADOW_TRICK_AWESOME = 162,


	// Tikal Animations

	TIKAL_IDLE1 = 217,
	TIKAL_IDLE2 = 218,
	TIKAL_DIG_BEGIN = 234,
	TIKAL_DIG = 235,
	TIKAL_DIG_JUMPOUT = 236,
	TIKAL_DIG_JUMPOUT_FALL_BEGIN = 237,
	TIKAL_DIG_WALL_BEGIN = 238,
	TIKAL_DIG_WALL = 239,
	TIKAL_DIG_WALL_EXIT_BEGIN = 240,
	TIKAL_CLIMB = 231,
	TIKAL_CLIMB_LEFT = 232,
	TIKAL_CLIMB_RIGHT = 233,
	TIKAL_GLIDE = 241,
	TIKAL_WALK = 226,
	TIKAL_SPRINT = 230,
	TIKAL_SPIRALUPPER = 219,
	TIKAL_STAND = 220,
	TIKAL_VICTORY = 221,
	TIKAL_FAILURE = 222,
	TIKAL_LAND_HIGH = 255,
	TIKAL_ATTACK = 223,
	TIKAL_INTRO_POSE = 224,
	TIKAL_IDLE_IDLE = 225,
	TIKAL_HAMMERPUNCH = 259,
	TIKAL_SPEEDWALK = 227,
	TIKAL_JOG = 228,
	TIKAL_RUN = 229,


	// Chaos Animations

	CHAOS_IDLE1 = 256,
	CHAOS_IDLE2 = 257,
	CHAOS_IDLE1_1 = 258,
	CHAOS_PUNCH1 = 242,
	CHAOS_PUNCH2 = 243,
	CHAOS_PUNCH3 = 244,
	CHAOS_PUNCH1_RUN = 245,
	CHAOS_PUNCH2_RUN = 246,
	CHAOS_PUNCH3_RUN = 247,
	CHAOS_WALK = 261,
	CHAOS_SPEEDWALK = 262,
	CHAOS_JOG = 263,
	CHAOS_RUN = 264,
	CHAOS_SPRINT = 265,
	CHAOS_GLIDE = 105,
	CHAOS_WALL_GRAB = 106,
	CHAOS_GLIDE_CANCEL = 107,
	CHAOS_GLIDE_CANCEL_1 = 108,
	CHAOS_CLIMB = 100,
	CHAOS_CLIMB_LEFT = 101,
	CHAOS_CLIMB_RIGHT = 102,
	CHAOS_WALL_HOLD = 103,
	CHAOS_DRILLDIVE = 115,
	CHAOS_DIG_BEGIN = 90,
	CHAOS_DIG = 91,
	CHAOS_DIG_WALL_BEGIN = 95,
	CHAOS_DIG_WALL = 96,
	CHAOS_STAND = 260,
	CHAOS_OBJECT_GRAB = 268,
	CHAOS_OBJECT_GRAB_1 = 270,
	CHAOS_OBJECT_HOLD = 269,
	CHAOS_LAND_HIGH = 132,
	CHAOS_VICTORY = 253,
	CHAOS_FAILURE = 254,
	CHAOS_ATTACK = 271,
	CHAOS_HAMMERPUNCH = 138,
	CHAOS_INTRO_POSE = 248,
	CHAOS_INTRO_IDLE = 251,
	CHAOS_SPIRALUPPER = 252,
	CHAOS_DIG_EXIT = 92,
	CHAOS_DIG_EXIT_FALL_BEGIN = 93,
	CHAOS_DIG_FAIL = 94,
	CHAOS_DIG_WALL_EXIT_BEGIN = 97,
	CHAOS_DIG_WALL_EXIT = 98,
	CHAOS_DIG_WALL_FAIL = 99,
	CHAOS_LEDGE_CLIMB = 104,
	CHAOS_KNOCKDOWN_RECOVERY = 124,
	CHAOS_OBJECT_WALK = 266,
	CHAOS_OBJECT_RUN = 267,
	CHAOS_INTRO_PUDDLE = 249,
	CHAOS_IDLE1_2 = 250,


	// Chao Walker Animations

	CHAOWALKER_IDLE1 = 190,
	CHAOWALKER_IDLE2 = 88,
	CHAOWALKER_STAND = 89,
	CHAOWALKER_STAND_1 = 191,
	CHAOWALKER_WALK = 91,
	CHAOWALKER_SPEEDWALK = 92,
	CHAOWALKER_JOG = 93,
	CHAOWALKER_JUMP = 94,
	CHAOWALKER_JUMP_FALL = 95,
	CHAOWALKER_STAND_2 = 96,
	CHAOWALKER_LAND_LOW = 97,
	CHAOWALKER_LAND_HIGH = 98,
	CHAOWALKER_BRAKE = 99,
	CHAOWALKER_DAMAGE = 100,
	CHAOWALKER_STAND_3 = 101,
	CHAOWALKER_BLOW = 102,
	CHAOWALKER_STAND_4 = 103,
	CHAOWALKER_STAND_5 = 104,
	CHAOWALKER_TURN = 105,
	CHAOWALKER_STAND_UPWARD = 106,
	CHAOWALKER_STAND_DOWNWARD = 107,
	CHAOWALKER_VICTORY = 108,
	CHAOWALKER_STAND_6 = 109,
	CHAOWALKER_STAND_7 = 110,
	CHAOWALKER_STAND_8 = 111,
	CHAOWALKER_STAND_9 = 112,
	CHAOWALKER_DEATH = 113,
	CHAOWALKER_LEDGE = 114,
	CHAOWALKER_HOP = 115,
	CHAOWALKER_HOP_FALL_BEGIN = 116,
	CHAOWALKER_HOP_LAND = 117,
	CHAOWALKER_STAND_10 = 118,
	CHAOWALKER_WHISTLE = 119,
	CHAOWALKER_LAUCNCHPANEL = 120,
	CHAOWALKER_LAUNCH_FALL_BEGIN = 121,
	CHAOWALKER_STAND_11 = 122,
	CHAOWALKER_PULLEY = 123,
	CHAOWALKER_MYSTICMELODY_LOOK = 124,
	CHAOWALKER_MYSTICMELODY_LOOK_1 = 125,
	CHAOWALKER_MYSTICMELODY_FLUTE = 126,
	CHAOWALKER_HOVER = 127,
	CHAOWALKER_OMOCHAO_ACTIVATE = 192,
	CHAOWALKER_OMOCHAO_ATTACK = 193,
	CHAOWALKER_OMOCHAO_ACTIVATE_1 = 194,
	CHAOWALKER_OMOCHAO_ACTIVATE_2 = 195,
	CHAOWALKER_POWERLASER = 133,
	CHAOWALKER_FAILURE = 134,
	CHAOWALKER_ATTACK = 135,
	CHAOWALKER_INTRO_POSE = 196,
	CHAOWALKER_INTRO_IDLE = 197,


	// Dark Chao Walker Animations

	DARKCHAOWALKER_IDLE2 = 88,
	DARKCHAOWALKER_STAND = 89,
	DARKCHAOWALKER_JUMP = 94,
	DARKCHAOWALKER_JUMP_FALL = 95,
	DARKCHAOWALKER_STAND_1 = 96,
	DARKCHAOWALKER_LAND_LOW = 97,
	DARKCHAOWALKER_LAND_HIGH = 98,
	DARKCHAOWALKER_BRAKE = 99,
	DARKCHAOWALKER_DAMAGE = 100,
	DARKCHAOWALKER_STAND_2 = 101,
	DARKCHAOWALKER_BLOW = 102,
	DARKCHAOWALKER_STAND_3 = 103,
	DARKCHAOWALKER_STAND_4 = 104,
	DARKCHAOWALKER_TURN = 105,
	DARKCHAOWALKER_STAND_UPWARD = 106,
	DARKCHAOWALKER_STAND_DOWNWARD = 107,
	DARKCHAOWALKER_VICTORY = 108,
	DARKCHAOWALKER_STAND_5 = 109,
	DARKCHAOWALKER_STAND_6 = 110,
	DARKCHAOWALKER_STAND_7 = 111,
	DARKCHAOWALKER_STAND_8 = 112,
	DARKCHAOWALKER_DEATH = 113,
	DARKCHAOWALKER_LEDGE = 114,
	DARKCHAOWALKER_HOP = 115,
	DARKCHAOWALKER_HOP_FALL_BEGIN = 116,
	DARKCHAOWALKER_HOP_LAND = 117,
	DARKCHAOWALKER_STAND_9 = 118,
	DARKCHAOWALKER_WHISTLE = 119,
	DARKCHAOWALKER_LAUNCHPANEL = 120,
	DARKCHAOWALKER_LAUNCH_FALL_BEGIN = 121,
	DARKCHAOWALKER_STAND_10 = 122,
	DARKCHAOWALKER_PULLEY = 123,
	DARKCHAOWALKER_MYSTICMELODY_LOOK = 124,
	DARKCHAOWALKER_MYSTICMELODY_LOOK_1 = 125,
	DARKCHAOWALKER_MYSTICMELODY_FLUTE = 126,
	DARKCHAOWALKER_HOVER = 127,
	DARKCHAOWALKER_POWERLASER_FIRE = 133,
	DARKCHAOWALKER_FAILURE = 134,
	DARKCHAOWALKER_ATTACK = 135,
	DARKCHAOWALKER_IDLE1 = 190,
	DARKCHAOWALKER_STAND_11 = 191,
	DARKCHAOWALKER_DARKOMOCHAO_ACTIVATE = 192,
	DARKCHAOWALKER_DARKOMOCHAO_ACTIVATE_1 = 194,
	DARKCHAOWALKER_DARKOMOCHAO_ACTIVATE_2 = 195,
	DARKCHAOWALKER_INTRO_POSE = 196,
	DARKCHAOWALKER_INTRO_IDLE = 197,
	DARKCHAOWALKER_DARKOMOCHAO_ANIM = 198,
	DARKCHAOWALKER_WALK = 199,
	DARKCHAOWALKER_SPEEDWALK = 200,
	DARKCHAOWALKER_JOG = 201,


	// Special Animations

	SP_COMMON_UPGRADE = 86,
	SP_COMMON_BOARD_LEAN_LEFT = 121,
	SP_COMMON_BOARD_LEAN_RIGHT = 122,
	SP_COMMON_BOARD_LEAN_LEFT_1 = 123,
	SP_COMMON_BOARD_LEAN_RIGHT_1 = 124,
	SP_COMMON_BOARD_BRAKE = 125,
	SP_COMMON_BOARD_BRAKE_ALT = 126,
	SP_COMMON_BOARD_JUMP = 127,
	SP_COMMON_BOARD_MIDAIR = 128,
	SP_COMMON_BOARD_FALL = 129,
	SP_COMMON_BOARD_NEUTRAL = 130,
	SP_COMMON_BOARD_KNOCKED = 131,
	SP_COMMON_BOARD_KNOCKED_1 = 132,
	SP_BOARD_LEAN_LEFT = 145,
	SP_BOARD_LEAN_RIGHT = 146,
	SP_BOARD_LEAN_LEFT_1 = 147,
	SP_BOARD_LEAN_RIGHT_1 = 148,
	SP_BOARD_BRAKE = 149,
	SP_BOARD_BRAKE_ALT = 150,
	SP_BOARD_JUMP = 151,
	SP_BOARD_MIDAIR = 152,
	SP_BOARD_FALL = 153,
	SP_BOARD_NEUTRAL = 154,
	SP_BOARD_KNOCKED = 155,
	SP_BOARD_KNOCKED_1 = 156,
	SP_COMMON_VINE_GRAB = 185,
	SP_COMMON_VINE_HOLD = 186,
	SP_COMMON_BUNGEE_FALL = 187,
	SP_COMMON_BUNGEE_DIVE = 188,
	SP_COMMON_BUNGEE_SWING = 189,
	SP_COMMON_MISSILE_MH = 190,
	SP_COMMON_MIDAIRSPIN = 191,
	SP_COMMON_BAR_SWING = 192,
	SP_COMMON_BAR_SWING_ALT = 193,
	SP_COMMON_BAR_TRICK_BEGIN = 194,
	SP_COMMON_BAR_TRICK_ALT_BEGIN = 195,
	SP_COMMON_BAR_TRICK_SPIN1 = 196,
	SP_COMMON_BAR_TRICK_SPIN2 = 197,
	SP_COMMON_BAR_TRICK_UNCURL = 198,
	SP_COMMON_QUICKSAND_SINK = 199,
	SP_COMMON_RAIL_CEILING = 200,
	SP_COMMON_LEVER = 201,
	SP_COMMON_WATER_SLIDE = 202

};

// Animation Transition types.
enum ANIM_TRANSITIONS {
	FIRSTFRAME = 0, // Always the first frame
	FIRSTFRAME_1 = 1, // Always the first frame
	NOANIM = 2, // Skip animation, puts the player in its default pose
	PLAYANIM_LOOP = 3, // Loop animation
	PLAYANIM_CUTTONEXT = 4, // Play once, hard transition
	PLAYANIM_CUTTONEXT_1 = 5, // Play once, hard transition
	PLAYANIM_STOPONLAST = 6, // Play once, then stop at last frame
	PLAYANIM_REVERSE = 7, // Play reverse from last frame
	PLAYANIM_REVERSE_STOPONFIRST = 8, // Play reverse from last frame then stop at first frame
	PLAYANIM_SMOOTHTONEXT = 9, // Play once, smooth transition
	PLAYANIM_DIRECTIONAL_SLOW = 10, // Directional input (slow)
	PLAYANIM_DIRECTIONAL_NORMAL = 11, // Directional input (normal)
	PLAYANIM_DIRECTIONAL_FAST = 12, // Directional input (fast)
	ANIM_CODE = 13 // Manually controlled in code (first frame otherwise)
};